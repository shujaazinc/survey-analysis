---
format:
  html:
    page-layout: full
    toc: true
    toc-title: "Table of Contents"
    toc-depth: 5
    toc-location: left
    css: custom.css
    include-in-header: 
      text: |
        <div id="title">
          <div style="float: left; width: 20%;">
            <img src="images/logo.png" alt="Logo" style="width: 150px; margin-left: 20px;"/>
          </div>
          <div style="float: left; width: 60%; text-align: center;">
            <h1> Annual Survey Insights Portal </h1>
          </div>
          <div style="float: right; width: 20%; text-align: right;">
            <p style="margin-right: 20px; margin-top: 20px; font-size: 1.2em;">Shujaaz K&L</p>
          </div>
        </div>
---


```{r}
#| message: false
#| results: hide
#| echo: false


library(tidyverse)
library(readxl)
library(scales)
library(DT)
library(gt)
library(haven)
library(rio)
library(janitor)
library(data.table)
library(sjlabelled)
library(sjmisc)
library(ggtext)
library(scales)
library(prismatic)
library(gtsummary)
library(survey)
library(srvyr)
library(psych)
library(extrafont)
```

```{r}
#| message: false
#| results: hide
#| echo: false

font_import()
loadfonts(device = "win")

# # Define the custom theme with adjusted font sizes
# custom_theme <- theme_minimal(base_size = 15) +  # Adjust base size as needed
#   theme(
#     plot.title = element_text(size = 12, face = "bold"),  # Adjust title size
#     legend.title = element_text(size = 10),              # Adjust legend title size
#     legend.text = element_text(size = 12),               # Adjust legend text size
#     axis.text = element_text(size = 12),                 # Adjust axis text size
#     axis.title = element_text(size = 12)                 # Adjust axis title size
#   )

# Set the custom theme globally
# Set the global theme
theme_set(
  theme_minimal(base_family = "Roboto Condensed") +
    theme(plot.title = element_text(hjust = 0.5))
)
```


```{r}
#| message: false
#| results: hide
#| echo: false

raw_23 <- read_sav("data/2023_shujaaz annual survey anonymized.sav")
pop_kenya <- import("data/us_census_pop_kenya.xlsx", 
                    sheet = "2015 - 2030", 
                    skip = 3)

county_mapping <- import("data/county_cleaning.xlsx", 
                    sheet = "Mapping") |> select(-check)
raw_23 <- raw_23 |>
  left_join(county_mapping,
            by = c("Q1_2" = "value"))
```

```{r}
#| message: false
#| results: hide
#| echo: false

binarize_awareness <- function(data, columns) {
  # Ensure columns is a character vector
  columns <- as.character(columns)
  
  # Loop through each specified column
  for (col in columns) {
    # Check if the column exists in the data frame
    if (col %in% colnames(data)) {
      # Replace 2 with 0 in the specified column
      data[[col]][data[[col]] %in% c(2,3)] <- 0
      # Assign factor labels
      data[[col]] <- as.numeric(data[[col]])
    } else {
      warning(paste("Column", col, "not found in the data frame"))
    }
  }
  
  return(data)
}

# Awareness data cleaning
awareness_vars <- c("T_Q3_1_1", 
                    "T_Q3_1_2", 
                    "T_Q3_1_3", 
                    "T_Q3_1_4",
                    "Q3_2_O1",
                    "Q3_2_O2",
                    "Q3_2_O3",
                    "Q3_2a",
                    "T_Q3_3_1",
                    "T_Q3_3_2",
                    "T_Q3_3_3",
                    "Q3_4",
                    "Q3_4a")

awareness_clean <- binarize_awareness(raw_23, awareness_vars) %>%
  mutate(aware = do.call(pmax, c(select(., all_of(awareness_vars)), 
                                         na.rm = TRUE))
  )
  
  
```


```{r}
#| message: false
#| results: hide
#| echo: false

binarize_engagement <- function(data, columns) {
  # Ensure columns is a character vector
  columns <- as.character(columns)
  
  # Loop through each specified column
  for (col in columns) {
    # Check if the column exists in the data frame
    if (col %in% colnames(data)) {
      # Replace with 1 in the specified column
      data[[col]][data[[col]] %in% c(1,6)] <- 0
      # Replace with 0 in the specified column
      data[[col]][data[[col]] %in% c(2,3,4,5)] <- 1
      # Assign factor labels
      data[[col]] <- as.numeric(data[[col]])
    } else {
      warning(paste("Column", col, "not found in the data frame"))
    }
  }
  
  return(data)
}

# Awareness data cleaning
engagement_vars <- c("T_Q3_5_1", 
                    "T_Q3_5_2", 
                    "T_Q3_5_3", 
                    "T_Q3_5_4",
                    "T_Q3_5_5",
                    "T_Q3_5_6",
                    "T_Q3_5_7",
                    "T_Q3_5_8",
                    "T_Q3_5_9",
                    "T_Q3_5_10",
                    "T_Q3_5_11",
                    "T_Q3_5_12",
                    "T_Q3_5_13",
                    "T_Q3_5_14",
                    "T_Q3_5_15",
                    "T_Q3_5_16",
                    "T_Q3_5_17",
                    "T_Q3_5_18"
                    )

less_comic <- setdiff(engagement_vars, "T_Q3_5_1")

meta_combo_vars <-  c("T_Q3_5_13","T_Q3_5_14", "T_Q3_5_15")
facebook_vars <- c("T_Q3_5_2", "T_Q3_5_4", "T_Q3_5_12", "T_Q3_5_16")
instagram_vars <- c("T_Q3_5_3", "T_Q3_5_6")
youtube_vars <-  c("T_Q3_5_8", "T_Q3_5_9")
tiktok_vars <- c("T_Q3_5_10")
twitter_vars <- c("T_Q3_5_5")
whatsapp_vars <- c("T_Q3_5_7")
sms_vars <- c("T_Q3_5_17")


engagement_clean <- binarize_engagement(awareness_clean, engagement_vars) %>%
  mutate(engage = do.call(pmax, c(select(., all_of(engagement_vars)), 
                                         na.rm = TRUE)),
         engagement_noncomic = do.call(pmax, c(select(., all_of(less_comic)), 
                                         na.rm = TRUE)),
         comic_only = case_when(T_Q3_5_1 == 0 ~ 0,
                                engagement_noncomic == 0 & T_Q3_5_1 == 1 ~ 1,
                                 TRUE ~ NA_integer_
                                ),
         meta_combo_use = do.call(pmax, c(select(., all_of(meta_combo_vars)), 
                                         na.rm = TRUE)),
         facebook_use = do.call(pmax, c(select(., all_of(facebook_vars)), 
                                         na.rm = TRUE)),
         instagram_use = do.call(pmax, c(select(., all_of(instagram_vars)), 
                                         na.rm = TRUE)),
         youtubr_use = do.call(pmax, c(select(., all_of(youtube_vars)), 
                                         na.rm = TRUE)),
         tiktok_use = do.call(pmax, c(select(., all_of(tiktok_vars)), 
                                         na.rm = TRUE)),
         whataspp_use = do.call(pmax, c(select(., all_of(whatsapp_vars)), 
                                         na.rm = TRUE)),
         sms_use = do.call(pmax, c(select(., all_of(sms_vars)), 
                                         na.rm = TRUE))
         
  ) %>%
  mutate(channels_use = rowSums(select(., meta_combo_use:sms_use), 
                                na.rm = TRUE),
         channels_binary = case_when(channels_use == 0 ~ 0,
                                     channels_use > 1 ~ 1,
                                     TRUE ~ NA_integer_
                                     )
  )
  
  
```


```{r}
#| message: false
#| results: hide
#| echo: false


modern_contraception_vars <- c("FP11_6", 
                               "FP11_7", 
                               "FP11_8", 
                               "FP11_9", 
                               "FP11_10", 
                               "FP11_11", 
                               "FP11_12", 
                               "T_FP11_14", 
                               "FP11_15", 
                               "FP11_16")

engagement_clean <-engagement_clean %>%
  mutate(modern_fp = do.call(pmin, c(select(., all_of(modern_contraception_vars)), 
                                         na.rm = TRUE))
         )

```


```{r}
#| message: false
#| results: hide
#| echo: false

## select minimum data

clean_data <- engagement_clean |>
  transmute(id = SbjNum, #Respondent ID
           code = Code,
           county_name = county_label, # County Name
           location = set_label(factor(case_when(Q1_6 == 1 ~ "Urban",
                                        Q1_6 == 2 ~ "Rural",
                                        TRUE ~ NA_character_)),
                                "Location"),
            # Age
           age_group = set_label(factor(
             case_when(Actual_Age >= 15 & Actual_Age <= 19 ~ "15-19",
                       Actual_Age >= 20 & Actual_Age <= 24 ~ "20-24",
                       TRUE ~ NA_character_)),
                             "Age"),
           # Gender
           gender = set_label(factor(
             case_when(Q1_8 == 1 ~ "Male",
                       Q1_8 == 2 ~ "Female",
                       TRUE ~ NA_character_)),
             "Gender"),
           
           persona = set_label(
             factor(case_when(
               gender == "Female" & age_group == "15-19" ~ "Nana",
               gender == "Female" & age_group == "20-24" ~ "Nina",
               gender == "Male" & age_group == "15-19" ~ "Boni",
               gender == "Male" & age_group == "20-24" ~ "Barasa",
               TRUE ~ NA_character_)),
               "Persona"),
           
           education = set_label(relevel(as.factor(
             case_when(Q1_9 %in% c(1,2,3) ~ "Incomplete primary",
                       Q1_9 %in% c(4) ~ "Complete primary",
                       Q1_9 %in% c(5) ~ "Complete secondary",
                       Q1_9 %in% c(6,7) ~ "Secondary and above",
                       TRUE ~ NA_character_)),
             "Incomplete primary"),
             "Education Level"),
           
           
           awareness = set_label(factor(case_when(aware == 1 ~ 1,
                                 aware == 0 & engage == 1 ~ 1,
                                 TRUE ~ aware
                                 ),
                                 labels = c("No", "Yes")),
                                 "Awareness"),
           
           
           engagement = set_label(factor(case_when(!is.na(aware) & is.na(engage) ~ 0,
                                  TRUE ~ engage
                                  ),
                                 labels = c("No", "Yes")),
                                 "Awareness"),
           
           
           modern_fp_1 = set_label(factor(case_when(modern_fp %in% c(2,3,4,5) ~ "No",
                                                    modern_fp == 1 ~ "Yes",
                                                    TRUE ~ NA_character_),
                                                  labels = c("No", "Yes")),
                                          "Use of modern contraceptives")
  ) |>
  filter(!is.na(age_group))
  

```



```{r}
#| message: false
#| results: hide
#| echo: false

county_pop <- pop_kenya |>
  filter(ADM_LEVEL == 1) |>  # Ensure ADM_LEVEL column exists and is filtered for level 1
  transmute(
    country = "Kenya",
    county = ADM1_NAME,  # Ensure ADM1_NAME column exists
    code = as.numeric(NSO_CODE),  # Ensure NSO_CODE can be converted to numeric
    
    # Female Pop
    F1519_2023 = F1519_2023,  # Ensure these columns exist
    F1519_2024 = F1519_2024,
    F1519_2025 = F1519_2025,
    
    F2024_2023 = F2024_2023,
    F2024_2024 = F2024_2024,
    F2024_2025 = F2024_2025,
    
    # Male Pop
    M1519_2023 = M1519_2023,
    M1519_2024 = M1519_2024,
    M1519_2025 = M1519_2025,
    
    M2024_2023 = M2024_2023,
    M2024_2024 = M2024_2024,
    M2024_2025 = M2024_2025
  ) |>
  mutate(
    # Explicitly refer to the current data frame within rowSums
    POP23 = rowSums(across(c(F1519_2023, F2024_2023, M1519_2023, M2024_2023)), na.rm = TRUE),
    POP24 = rowSums(across(c(F1519_2024, F2024_2024, M1519_2024, M2024_2024)), na.rm = TRUE),
    POP25 = rowSums(across(c(F1519_2025, F2024_2025, M1519_2025, M2024_2025)), na.rm = TRUE)
  )

counties <- county_pop |>
  select(county, code)
```

```{r}
#| message: false
#| results: hide
#| echo: false

population_data <- county_pop |>
    pivot_longer(
    cols = starts_with("F") | starts_with("M"),  
    names_to = "indicator",              
    values_to = "population") |>
    mutate(gender = substr(indicator, 1, 1),
           age_group = as.integer(substr(indicator, 2, 5)),
           year = as.integer(substr(indicator, 7, 10))) |>
  transmute(
    country = country,
    code = code,
    county = county,
    gender = ifelse(gender == "F", "Female", "Male"),
    age_group = paste(substr(age_group, 1, 2), substr(age_group, 3,4), sep = "-"),
    year = year,
    population = population
  ) |>
  pivot_wider(names_from = year,
              values_from = population,
              names_prefix = "pop")

write_csv(population_data,
          "data/pop_projections.csv")
```

```{r}
#| message: false
#| results: hide
#| echo: false


# Step 1: Population totals for each group (typically from census data)
survey_population_totals <- population_data |>
  select(code, county, age_group, gender, pop2023) |>
  rename(population = pop2023)

# Step 2: Calculate counts from survey data
survey_counts <- clean_data %>%
  group_by(age_group, gender, code, county_name) %>%
  summarise(count = n(), .groups = 'drop')  # .groups = 'drop' to ungroup directly

# Step 3: Merge survey counts with population totals
survey_counts <- survey_counts %>%
  left_join(survey_population_totals, by = c("age_group", "gender", "code"))

# Step 4: Calculate base weights
# need to adjust the weight so it sums to the population instead of the sample
survey_counts <- survey_counts |>
  mutate(base_weight = population / count)  # Correct the formula

# Step 5: Merge scaled weights back with survey data
survey_data <- clean_data %>%
  left_join(survey_counts |> select(age_group, gender, code, population, base_weight), 
            by = c("age_group", "gender", "code"))

# Step 6: Create a new strata variable that combines code, age_group, and gender
survey_data <- survey_data %>%
  mutate(strata_var = paste(code, age_group, gender, sep = "_"))

# Step 7: Handle missing values in weights if any
survey_data <- survey_data %>%
  mutate(base_weight = ifelse(is.na(base_weight), 0, base_weight))

# Step 8: Verify the weights
sum(survey_data$base_weight)

```
```{r}
#| message: false
#| results: hide
#| echo: false

kenya_counties <- 47

counties_surveyed <- survey_data |>
  distinct(county_name) |> pull() |> length()

unweighted_summary_table <- survey_data %>%
  select(age_group, gender, location, education) %>%
  tbl_summary(
    by = gender,
    statistic = list(all_continuous() ~ "{median} ({sd})", all_categorical() ~ "{n} ({p}%)"),
    digits = all_continuous() ~ 2,
    label = list(age_group ~ "Age",
                 location ~ "Location")
  ) %>%
  add_overall() %>%
  modify_header(label ~ "**Characteristic**") %>%
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Gender**") %>%
  as_gt() %>%
  tab_style(
    style = list(cell_borders(sides = "all", color = "gray", weight = px(1)),
                 cell_text(weight = "bold", color = "black")),
    locations = cells_body()
  ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", color = "black"),
      cell_fill(color = "#FFFDD0")
    ),
    locations = cells_column_labels(c(label, stat_0, stat_1, stat_2))
  ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", color = "black"),
      cell_fill(color = "#FFFDD0")
    ),
    locations = cells_column_spanners()
  ) %>%
  opt_table_font(
    font = "Arial"
  ) |>
  tab_options(row_group.padding = px(1))

```

# Demographic Characteristics

```{r}
#| echo: false
unweighted_summary_table
```


The total sample size is 2002. Age distribution shows that among the female respondents, 54% are aged 15-19, and 46% are aged 20-24. In terms of location, 61% of the respondents reside in rural areas, with 60% of the females and 62% of the males living rurally. Conversely, 39% live in urban areas, with an urban distribution of 40% among females and 38% among males. Educational attainment varies, with 7.7% of the respondents having incomplete primary education (7.9% females and 7.6% males).


```{r}
#| echo: false

survey_design <- survey_data |>
  as_survey_design(weights = base_weight,
                   strata = code,
                   ids = id,
                   nest = TRUE)
```


# Reach

## Overall reach

```{r}
#| echo: false
#| message: false
#| warning: false

# Awareness
awareness_summary <- survey_design %>%
  group_by(awareness) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(awareness = case_when(
    awareness == "Yes" ~ "Aware",
    awareness == "No" ~ "Unaware",
    TRUE ~ NA_character_
  ))

overall_aware_total <- awareness_summary %>%
  filter(awareness == "Aware") %>%
  pull(total)

overall_aware_prop <- awareness_summary %>%
  filter(awareness == "Aware") %>%
  pull(proportion)



awareness_summary_persona <- survey_design %>%
  group_by(persona, awareness) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(awareness = case_when(
    awareness == "Yes" ~ "Aware",
    awareness == "No" ~ "Unaware",
    TRUE ~ NA_character_
  ))


```


::: {.flex-container}

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4
#| fig-height: 2

ggplot(awareness_summary, aes(x = 2, y = proportion, fill = awareness)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  theme_void() +
  theme(legend.position = "none") +
  xlim(0.5, 2.5) +
  geom_text(aes(label = ifelse(awareness == "Aware", 
  paste0(label_percent()(overall_aware_prop)), "")), 
            position = position_stack(vjust = 0.5), color = "black")+
  scale_fill_manual(values = c("Aware" = "#FA0005", "Unaware" = "darkgray"),
                    name = "Legend") +
labs(
    title = "Percentage reach"
  )
```

</div>

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4
#| fig-height: 2

ggplot(awareness_summary, aes(x = 2, y = total, fill = awareness)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  theme_void() +
  theme(legend.position = "none") +
  xlim(0.5, 2.5) +
  geom_text(aes(label = ifelse(awareness == "Aware", 
  paste0(comma((overall_aware_total))), "")), 
            position = position_stack(vjust = 0.5), color = "black")+
  scale_fill_manual(values = c("Aware" = "#FA0005", "Unaware" = "darkgray"),
                    name = "Legend") +
labs(
    title = "Absolute reach"
  )
```

</div>

:::

**`r comma(overall_aware_total)`** (**`r label_percent()(overall_aware_prop)`**) young people are aware of Shujaaz media.

::: {.note}
<span class="info-icon">ℹ️</span>
These results include prompted and un-prompted.
:::

## Reach by persona

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 4


awareness_summary_persona |>
ggplot(aes(x = persona, y = proportion, 
             fill = fct_rev(awareness))) +
  geom_col(position = "fill", color = "white") +
  geom_text(aes(label = label_percent(accuracy=1)(proportion)), 
            position = position_fill(vjust = 0.5),color = "white") +  # Adjust size and color as needed
  scale_fill_manual(
    values = c("darkgrey", "#FA0005"),
    guide = guide_legend(reverse = TRUE)
  ) +
  scale_y_continuous(labels = label_percent()) +
  labs(
    title = "Awareness by Persona",
    y = NULL,
    x = NULL,
    fill = "Legend"
  ) 
```


```{r}
#| echo: false
#| message: false
#| warning: false

# test for equality of brand awareness
persona_awareness_test <- survey_design %>%
  drop_na(awareness, persona) %>%
  svychisq(
    formula = ~ persona + awareness,
    design = .,
    statistic = "Chisq",
    na.rm = TRUE
  )
```

::: {.note}
<span class="info-icon">ℹ️</span>
Brand awareness across all personas was largely similar, as the differences were not statistically significant (p-value = 0.3294).
:::



## Reach by location
```{r}
#| echo: false
#| message: false
#| warning: false

awareness_summary_location <- survey_design %>%
  group_by(location, awareness) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(awareness = case_when(
    awareness == "Yes" ~ "Aware",
    awareness == "No" ~ "Unaware",
    TRUE ~ NA_character_
  )) |>
rename(Location = location) |>
ungroup()
```


```{r}
#| echo: false
#| message: false
#| warning: false

# test for equality of awareness
location_awareness_test <- survey_design %>%
  drop_na(location, awareness) %>%
  svychisq(
    formula = ~ location + awareness,
    design = .,
    statistic = "Chisq",
    na.rm = TRUE
  )
```


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 4

ggplot(awareness_summary_location, aes(x=awareness, y=proportion, fill=Location)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=proportion-proportion_se, ymax=proportion+proportion_se), width=0.2, position=position_dodge(0.9)) +
  geom_text(aes(label=label_percent()(round(proportion, 2))), vjust=-0.5, position=position_dodge(0.9)) +
  labs(title="Reach by location", x="Awareness", y="Proportion")

```



::: {.note}
<span class="info-icon">ℹ️</span>
There is strong evidence to suggest that brand awareness levels vary location (p-value < 0.001).
:::




## Reach by county

```{r}
#| echo: false
#| message: false
#| warning: false

awareness_summary_county <- survey_design %>%
  group_by(county_name, awareness) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(awareness = case_when(
    awareness == "Yes" ~ "Aware",
    awareness == "No" ~ "Unaware",
    TRUE ~ NA_character_
  )) |>
rename(County = county_name) |>
ungroup()
```


```{r}
#| echo: false
#| message: false
#| warning: false

awareness_summary_wide <- awareness_summary_county %>%
  select(County, awareness, total) %>%
  pivot_wider(names_from = awareness, values_from = total,values_fill = list(total = 0))
  
# Step 3: Calculate the `% Aware`
awareness_table <- awareness_summary_wide %>%
  mutate(`% Aware` = `Aware` / (`Aware` + `Unaware`)) %>%
  select(County, `% Aware`, `Aware`, `Unaware`) |>
  arrange(`% Aware`)

# Define a function to generate the color based on the value
color_fill <- function(x) {
  scales::col_numeric(
    palette = colorRampPalette(c("white", "lightblue"))(10), 
    domain = c(0, 1)
  )(x)
}

# Create a gt table with dynamic color fill
create_awareness_table <- function(data) {
data %>%
  gt() %>%
  # tab_header(
  #   title = "Awareness by County"
  # ) %>%
  data_color(
    columns = c(`% Aware`),
    colors = color_fill
  ) %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
  cols_label(
    County = "County",
    `% Aware` = "% Aware",
    Aware = "Aware",
    Unaware = "Unaware"
  ) %>%
  fmt_percent(
    columns = c(`% Aware`),
    decimals = 0
  ) %>%
fmt_number(
      columns = c(Aware, Unaware),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "center",
    columns = everything()
  ) %>%
  opt_table_font(
    font = "Arial"
  ) |>
tab_options(table.width = pct(100))
}

```


```{r}
#| echo: false
#| message: false
#| warning: false

# test for equality of awareness
county_awareness_test <- survey_design %>%
  drop_na(awareness, county_name) %>%
  svychisq(
    formula = ~ county_name + awareness,
    design = .,
    statistic = "Chisq",
    na.rm = TRUE
  )
```


::: {.flex-container}

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false

create_awareness_table(awareness_table |> slice(1:22))
```

</div>

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false

create_awareness_table(awareness_table |> slice(23:43))
```

</div>

:::


::: {.note}
<span class="info-icon">ℹ️</span>
There is strong evidence that brand awareness levels vary by county (p-value < 0.001).
:::


# Engagement

## Overall engagement 

```{r}
#| echo: false
#| message: false
#| warning: false

# Awareness
engagement_summary <- survey_design %>%
  group_by(engagement) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(engagement = case_when(
    engagement == "Yes" ~ "Ever engaged",
    engagement == "No" ~ "Never enngaged",
    TRUE ~ NA_character_
  ))

overall_engaged_total <- engagement_summary %>%
  filter(engagement == "Ever engaged") %>%
  pull(total)

overall_engaged_prop <- engagement_summary %>%
  filter(engagement == "Ever engaged") %>%
  pull(proportion)



engagement_summary_persona <- survey_design %>%
  group_by(persona, engagement) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(engagement = case_when(
    engagement == "Yes" ~ "Ever engaged",
    engagement == "No" ~ "Never enngaged",
    TRUE ~ NA_character_
  ))


```


::: {.flex-container}

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4
#| fig-height: 2

ggplot(engagement_summary, aes(x = 2, y = proportion, fill = engagement)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  theme_void() +
  theme(legend.position = "none") +
  xlim(0.5, 2.5) +
  geom_text(aes(label = ifelse(engagement == "Ever engaged", 
  paste0(label_percent()(overall_engaged_prop)), "")), 
            position = position_stack(vjust = 0.5), color = "black")+
  scale_fill_manual(values = c("Ever engaged" = "#FA0005", "Never engaged" = "darkgray"),
                    name = "Legend") +
labs(
    title = "Percentage engaged"
  )
```

</div>

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4
#| fig-height: 2

ggplot(engagement_summary, aes(x = 2, y = total, fill = engagement)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  theme_void() +
  theme(legend.position = "none") +
  xlim(0.5, 2.5) +
  geom_text(aes(label = ifelse(engagement == "Ever engaged", 
  paste0(comma((overall_engaged_total))), "")), 
            position = position_stack(vjust = 0.5), color = "black")+
  scale_fill_manual(values = c("Ever engaged" = "#FA0005", "Never engaged" = "darkgray"),
                    name = "Legend") +
labs(
    title = "Absolute engagement"
  )
```

</div>

:::

**`r comma(overall_engaged_total)`** (**`r label_percent()(overall_engaged_prop)`**) young people have ever engaged with Shujaaz brand.

::: {.note}
<span class="info-icon">ℹ️</span>
These results include those aware and not aware of Shujaaz brand.
:::

## Engagement by persona

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 4


engagement_summary_persona |>
ggplot(aes(x = persona, y = proportion, 
             fill = fct_rev(engagement))) +
  geom_col(position = "fill", color = "white") +
  geom_text(aes(label = label_percent(accuracy=1)(proportion)), 
            position = position_fill(vjust = 0.5),color = "white") +  # Adjust size and color as needed
  scale_fill_manual(
    values = c("darkgrey", "#FA0005"),
    guide = guide_legend(reverse = TRUE)
  ) +
  scale_y_continuous(labels = label_percent()) +
  labs(
    title = "Engagement by Persona",
    y = NULL,
    x = NULL,
    fill = "Legend"
  ) 
```

```{r}
#| echo: false
#| message: false
#| warning: false

# test for equality of brand awareness
persona_engagement_test <- survey_design %>%
  drop_na(engagement, persona) %>%
  svychisq(
    formula = ~ persona + engagement,
    design = .,
    statistic = "Chisq",
    na.rm = TRUE
  )
```


::: {.note}
<span class="info-icon">ℹ️</span>
Brand engagement across all personas was largely similar, as the differences were not statistically significant (p-value = 0.4605).
:::


## Engagement by location
```{r}
#| echo: false
#| message: false
#| warning: false

engagement_summary_location <- survey_design %>%
  group_by(location, engagement) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(engagement = case_when(
    engagement == "Yes" ~ "Ever engaged",
    engagement == "No" ~ "Never engaged",
    TRUE ~ NA_character_
  )) |>
rename(Location = location) |>
ungroup()
```


```{r}
#| echo: false
#| message: false
#| warning: false

# test for equality of awareness
location_engagement_test <- survey_design %>%
  drop_na(location, engagement) %>%
  svychisq(
    formula = ~ location + engagement,
    design = .,
    statistic = "Chisq",
    na.rm = TRUE
  )
```


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 4

ggplot(engagement_summary_location, aes(x=engagement, y=proportion, fill=Location)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=proportion-proportion_se, ymax=proportion+proportion_se), width=0.2, position=position_dodge(0.9)) +
  geom_text(aes(label=label_percent()(round(proportion, 2))), vjust=-0.5, position=position_dodge(0.9)) +
  labs(title="Engagement by location", x="Awareness", y="Proportion")

```



::: {.note}
<span class="info-icon">ℹ️</span>
There is strong evidence to suggest that brand engagement levels vary location (p-value < 0.001).
:::


## Engagement by county

```{r}
#| echo: false
#| message: false
#| warning: false

engagement_summary_county <- survey_design %>%
  group_by(county_name, engagement) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(engagement = case_when(
    engagement == "Yes" ~ "Ever engaged",
    engagement == "No" ~ "Never engaged",
    TRUE ~ NA_character_
  )) |>
rename(County = county_name) |>
ungroup()
```


```{r}
#| echo: false
#| message: false
#| warning: false

engagement_summary_wide <- engagement_summary_county %>%
  select(County, engagement, total) %>%
  pivot_wider(names_from = engagement, values_from = total,values_fill = list(total = 0))
  
# Step 3: Calculate the `% Aware`
engagement_table <- engagement_summary_wide %>%
  mutate(`% Engaged` = `Ever engaged` / (`Ever engaged` + `Never engaged`)) %>%
  select(County, `% Engaged`, `Ever engaged`, `Never engaged`) |>
  arrange(`% Engaged`)

# Define a function to generate the color based on the value
color_fill <- function(x) {
  scales::col_numeric(
    palette = colorRampPalette(c("white", "lightblue"))(10), 
    domain = c(0, 1)
  )(x)
}

# Create a gt table with dynamic color fill
create_engagement_table <- function(data) {
data %>%
  gt() %>%
  # tab_header(
  #   title = "Awareness by County"
  # ) %>%
  data_color(
    columns = c(`% Engaged`),
    colors = color_fill
  ) %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
  cols_label(
    County = "County",
    `% Engaged` = "% Engaged",
    `Ever engaged` = "Engaged",
    `Never engaged` = "Unengaged"
  ) %>%
  fmt_percent(
    columns = c(`% Engaged`),
    decimals = 0
  ) %>%
fmt_number(
      columns = c(`Ever engaged`, `Never engaged`),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "center",
    columns = everything()
  ) %>%
  opt_table_font(
    font = "Arial"
  ) |>
tab_options(table.width = pct(100), row.p)
}

```


```{r}
#| echo: false
#| message: false
#| warning: false

# test for equality of engagement
county_engagement_test <- survey_design %>%
  drop_na(awareness, county_name) %>%
  svychisq(
    formula = ~ county_name + engagement,
    design = .,
    statistic = "Chisq",
    na.rm = TRUE
  )
```


::: {.flex-container}

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false

create_engagement_table(engagement_table |> slice(1:21))
```

</div>

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false

create_engagement_table(engagement_table |> slice(22:43))
```

</div>

:::


::: {.note}
<span class="info-icon">ℹ️</span>
There is strong evidence that brand engagement levels vary by county (p-value < 0.001).
:::


