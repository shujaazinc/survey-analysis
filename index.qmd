---
format:
  html:
    page-layout: full
    toc: true
    toc-title: "Table of Contents"
    toc-depth: 5
    toc-expand: 2
    toc-location: left
    number-sections: true
    css: custom.css
    include-in-header: 
      text: |
        <div id="title">
          <div style="float: left; width: 20%;">
            <img src="images/logo.png" alt="Logo" style="width: 150px; margin-left: 20px;"/>
          </div>
          <div style="float: left; width: 60%; text-align: center;">
            <h1> Insights From The Annual Survey </h1>
          </div>
          <div style="float: right; width: 20%; text-align: right;">
            <p style="margin-right: 20px; margin-top: 20px; font-size: 1.2em;">Shujaaz K&L</p>
          </div>
        </div>
---


```{r}
#| message: false
#| results: hide
#| echo: false


library(tidyverse)
library(readxl)
library(scales)
library(DT)
library(gt)
library(haven)
library(rio)
library(janitor)
library(data.table)
library(sjlabelled)
library(sjmisc)
library(ggtext)
library(scales)
library(prismatic)
library(gtsummary)
library(survey)
library(srvyr)
library(psych)
library(extrafont)
library(likert)
library(broom)
library(prettyunits)
library(tidytext)
```

```{r}
#| message: false
#| results: hide
#| echo: false
#| warning: false

#font_import()
loadfonts(device = "win")

# # Define the custom theme with adjusted font sizes
# custom_theme <- theme_minimal(base_size = 15) +  # Adjust base size as needed
#   theme(
#     plot.title = element_text(size = 12, face = "bold"),  # Adjust title size
#     legend.title = element_text(size = 10),              # Adjust legend title size
#     legend.text = element_text(size = 12),               # Adjust legend text size
#     axis.text = element_text(size = 12),                 # Adjust axis text size
#     axis.title = element_text(size = 12)                 # Adjust axis title size
#   )

# Set the custom theme globally
# Set the global theme
theme_set(
  theme_minimal(base_family = "Roboto Condensed") +
    theme(plot.title = element_text(hjust = 0.5),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          axis.title.x = element_blank(),
          axis.title.y = element_blank())
)
```


```{r}
#| message: false
#| results: hide
#| echo: false

raw_23 <- read_sav("data/2023_shujaaz annual survey anonymized.sav")
pop_kenya <- import("data/us_census_pop_kenya.xlsx", 
                    sheet = "2015 - 2030", 
                    skip = 3)

county_mapping <- import("data/county_cleaning.xlsx", 
                    sheet = "Mapping") |> select(-check)
raw_23 <- raw_23 |>
  left_join(county_mapping,
            by = c("Q1_2" = "value"))
```

```{r}
#| message: false
#| results: hide
#| echo: false

binarize_awareness <- function(data, columns) {
  # Ensure columns is a character vector
  columns <- as.character(columns)
  
  # Loop through each specified column
  for (col in columns) {
    # Check if the column exists in the data frame
    if (col %in% colnames(data)) {
      # Replace 2 with 0 in the specified column
      data[[col]][data[[col]] %in% c(2,3)] <- 0
      # Assign factor labels
      data[[col]] <- as.numeric(data[[col]])
    } else {
      warning(paste("Column", col, "not found in the data frame"))
    }
  }
  
  return(data)
}

# Awareness data cleaning
awareness_vars <- c("T_Q3_1_1", 
                    "T_Q3_1_2", 
                    "T_Q3_1_3", 
                    "T_Q3_1_4",
                    "Q3_2_O1",
                    "Q3_2_O2",
                    "Q3_2_O3",
                    "Q3_2a",
                    "T_Q3_3_1",
                    "T_Q3_3_2",
                    "T_Q3_3_3",
                    "Q3_4",
                    "Q3_4a")

awareness_clean <- binarize_awareness(raw_23, awareness_vars) %>%
  mutate(aware = do.call(pmax, c(select(., all_of(awareness_vars)), 
                                         na.rm = TRUE))
  )
  
  
```


```{r}
#| message: false
#| results: hide
#| echo: false

binarize_engagement <- function(data, columns) {
  # Ensure columns is a character vector
  columns <- as.character(columns)
  
  # Loop through each specified column
  for (col in columns) {
    # Check if the column exists in the data frame
    if (col %in% colnames(data)) {
      # Replace with 1 in the specified column
      data[[col]][data[[col]] %in% c(1,6)] <- 0
      # Replace with 0 in the specified column
      data[[col]][data[[col]] %in% c(2,3,4,5)] <- 1
      # Assign factor labels
      data[[col]] <- as.numeric(data[[col]])
    } else {
      warning(paste("Column", col, "not found in the data frame"))
    }
  }
  
  return(data)
}

# Awareness data cleaning
engagement_vars <- c("T_Q3_5_1", 
                    "T_Q3_5_2", 
                    "T_Q3_5_3", 
                    "T_Q3_5_4",
                    "T_Q3_5_5",
                    "T_Q3_5_6",
                    "T_Q3_5_7",
                    "T_Q3_5_8",
                    "T_Q3_5_9",
                    "T_Q3_5_10",
                    "T_Q3_5_11",
                    "T_Q3_5_12",
                    "T_Q3_5_13",
                    "T_Q3_5_14",
                    "T_Q3_5_15",
                    "T_Q3_5_16",
                    "T_Q3_5_17",
                    "T_Q3_5_18"
                    )

less_comic <- setdiff(engagement_vars, "T_Q3_5_1")

meta_combo_vars <-  c("T_Q3_5_13","T_Q3_5_14", "T_Q3_5_15")
facebook_vars <- c("T_Q3_5_2", "T_Q3_5_4", "T_Q3_5_12", "T_Q3_5_16")
instagram_vars <- c("T_Q3_5_3", "T_Q3_5_6")
youtube_vars <-  c("T_Q3_5_8", "T_Q3_5_9")
tiktok_vars <- c("T_Q3_5_10")
twitter_vars <- c("T_Q3_5_5")
whatsapp_vars <- c("T_Q3_5_7")
sms_vars <- c("T_Q3_5_17")


engagement_clean <- binarize_engagement(awareness_clean, engagement_vars) %>%
  mutate(engage = do.call(pmax, c(select(., all_of(engagement_vars)), 
                                         na.rm = TRUE)),
         engagement_noncomic = do.call(pmax, c(select(., all_of(less_comic)), 
                                         na.rm = TRUE)),
         comic_only = case_when(T_Q3_5_1 == 0 ~ 0,
                                engagement_noncomic == 0 & T_Q3_5_1 == 1 ~ 1,
                                 TRUE ~ NA_integer_
                                ),
         meta_combo_use = do.call(pmax, c(select(., all_of(meta_combo_vars)), 
                                         na.rm = TRUE)),
         facebook_use = do.call(pmax, c(select(., all_of(facebook_vars)), 
                                         na.rm = TRUE)),
         instagram_use = do.call(pmax, c(select(., all_of(instagram_vars)), 
                                         na.rm = TRUE)),
         youtubr_use = do.call(pmax, c(select(., all_of(youtube_vars)), 
                                         na.rm = TRUE)),
         tiktok_use = do.call(pmax, c(select(., all_of(tiktok_vars)), 
                                         na.rm = TRUE)),
         whataspp_use = do.call(pmax, c(select(., all_of(whatsapp_vars)), 
                                         na.rm = TRUE)),
         sms_use = do.call(pmax, c(select(., all_of(sms_vars)), 
                                         na.rm = TRUE))
         
  ) %>%
  mutate(channels_use = rowSums(select(., meta_combo_use:sms_use), 
                                na.rm = TRUE),
         channels_binary = case_when(channels_use == 0 ~ 0,
                                     channels_use > 1 ~ 1,
                                     TRUE ~ NA_integer_
                                     )
  )
  
  
```


```{r}
#| message: false
#| results: hide
#| echo: false


modern_contraception_vars <- c("FP11_6", 
                               "FP11_7", 
                               "FP11_8", 
                               "FP11_9", 
                               "FP11_10", 
                               "FP11_11", 
                               "FP11_12", 
                               "T_FP11_14", 
                               "FP11_15", 
                               "FP11_16")

engagement_clean <-engagement_clean %>%
  mutate(modern_fp = do.call(pmin, c(select(., all_of(modern_contraception_vars)), 
                                         na.rm = TRUE))
         )

```


```{r}
#| message: false
#| results: hide
#| echo: false

## select minimum data

clean_data <- engagement_clean |>
  mutate(id = SbjNum, #Respondent ID
           code = Code,
           county_name = county_label, # County Name
           location = set_label(factor(case_when(Q1_6 == 1 ~ "Urban",
                                        Q1_6 == 2 ~ "Rural",
                                        TRUE ~ NA_character_)),
                                "Location"),
            # Age
           age_group = set_label(factor(
             case_when(Actual_Age >= 15 & Actual_Age <= 19 ~ "15-19",
                       Actual_Age >= 20 & Actual_Age <= 24 ~ "20-24",
                       TRUE ~ NA_character_)),
                             "Age"),
           # Gender
           gender = set_label(factor(
             case_when(Q1_8 == 1 ~ "Male",
                       Q1_8 == 2 ~ "Female",
                       TRUE ~ NA_character_)),
             "Gender"),
           
           persona = set_label(
             factor(case_when(
               gender == "Female" & age_group == "15-19" ~ "Nana",
               gender == "Female" & age_group == "20-24" ~ "Nina",
               gender == "Male" & age_group == "15-19" ~ "Boni",
               gender == "Male" & age_group == "20-24" ~ "Barasa",
               TRUE ~ NA_character_)),
               "Persona"),
           
           education = set_label(relevel(as.factor(
             case_when(Q1_9 %in% c(1,2,3) ~ "Incomplete primary",
                       Q1_9 %in% c(4) ~ "Complete primary",
                       Q1_9 %in% c(5) ~ "Complete secondary",
                       Q1_9 %in% c(6,7) ~ "Secondary and above",
                       TRUE ~ NA_character_)),
             "Incomplete primary"),
             "Education Level"),
           
           
           awareness = set_label(factor(case_when(aware == 1 ~ 1,
                                 aware == 0 & engage == 1 ~ 1,
                                 TRUE ~ aware
                                 ),
                                 labels = c("No", "Yes")),
                                 "Awareness"),
           
           
           engagement = set_label(factor(case_when(!is.na(aware) & is.na(engage) ~ 0,
                                  TRUE ~ engage
                                  ),
                                 labels = c("No", "Yes")),
                                 "Awareness"),
           
           
           modern_fp_1 = set_label(factor(case_when(modern_fp %in% c(2,3,4,5) ~ "No",
                                                    modern_fp == 1 ~ "Yes",
                                                    TRUE ~ NA_character_),
                                                  labels = c("No", "Yes")),
                                          "Use of modern contraceptives"),
         optimism = set_label(factor(case_when(
                                            AM3 == 1 ~ 0,
                                            AM3 %in% c(2, 3) ~ 1,
                                            TRUE ~ NA_integer_
                                          ), labels = c("No", "Yes")),
                                          "Optimism"),
         money_mngt = set_label(factor(case_when(
                                            T_F1_1 == 2 ~ 0,
                                            T_F1_1 == 1 ~ 1,
                                            TRUE ~ NA_integer_
                                          ), labels = c("No", "Yes")),
                                          "I know how to manage the little money I have to take care of my needs"),
         challenge = gsub("[[:punct:]]", "", tolower(Q1_15))
  ) |>
  filter(!is.na(age_group))
  

```



```{r}
#| message: false
#| results: hide
#| echo: false

county_pop <- pop_kenya |>
  filter(ADM_LEVEL == 1) |>  # Ensure ADM_LEVEL column exists and is filtered for level 1
  transmute(
    country = "Kenya",
    county = ADM1_NAME,  # Ensure ADM1_NAME column exists
    code = as.numeric(NSO_CODE),  # Ensure NSO_CODE can be converted to numeric
    
    # Female Pop
    F1519_2023 = F1519_2023,  # Ensure these columns exist
    F1519_2024 = F1519_2024,
    F1519_2025 = F1519_2025,
    
    F2024_2023 = F2024_2023,
    F2024_2024 = F2024_2024,
    F2024_2025 = F2024_2025,
    
    # Male Pop
    M1519_2023 = M1519_2023,
    M1519_2024 = M1519_2024,
    M1519_2025 = M1519_2025,
    
    M2024_2023 = M2024_2023,
    M2024_2024 = M2024_2024,
    M2024_2025 = M2024_2025
  ) |>
  mutate(
    # Explicitly refer to the current data frame within rowSums
    POP23 = rowSums(across(c(F1519_2023, F2024_2023, M1519_2023, M2024_2023)), na.rm = TRUE),
    POP24 = rowSums(across(c(F1519_2024, F2024_2024, M1519_2024, M2024_2024)), na.rm = TRUE),
    POP25 = rowSums(across(c(F1519_2025, F2024_2025, M1519_2025, M2024_2025)), na.rm = TRUE)
  )

counties <- county_pop |>
  select(county, code)
```

```{r}
#| message: false
#| results: hide
#| echo: false

population_data <- county_pop |>
    pivot_longer(
    cols = starts_with("F") | starts_with("M"),  
    names_to = "indicator",              
    values_to = "population") |>
    mutate(gender = substr(indicator, 1, 1),
           age_group = as.integer(substr(indicator, 2, 5)),
           year = as.integer(substr(indicator, 7, 10))) |>
  transmute(
    country = country,
    code = code,
    county = county,
    gender = ifelse(gender == "F", "Female", "Male"),
    age_group = paste(substr(age_group, 1, 2), substr(age_group, 3,4), sep = "-"),
    year = year,
    population = population
  ) |>
  pivot_wider(names_from = year,
              values_from = population,
              names_prefix = "pop")

write_csv(population_data,
          "data/pop_projections.csv")
```

```{r}
#| message: false
#| results: hide
#| echo: false


# Step 1: Population totals for each group (typically from census data)
survey_population_totals <- population_data |>
  select(code, county, age_group, gender, pop2023) |>
  rename(population = pop2023)

# Step 2: Calculate counts from survey data
survey_counts <- clean_data %>%
  group_by(age_group, gender, code, county_name) %>%
  summarise(count = n(), .groups = 'drop')  # .groups = 'drop' to ungroup directly

# Step 3: Merge survey counts with population totals
survey_counts <- survey_counts %>%
  left_join(survey_population_totals, by = c("age_group", "gender", "code"))

# Step 4: Calculate base weights
# need to adjust the weight so it sums to the population instead of the sample
survey_counts <- survey_counts |>
  mutate(base_weight = population / count)  # Correct the formula

# Step 5: Merge scaled weights back with survey data
survey_data <- clean_data %>%
  left_join(survey_counts |> select(age_group, gender, code, population, base_weight), 
            by = c("age_group", "gender", "code"))

# Step 6: Create a new strata variable that combines code, age_group, and gender
survey_data <- survey_data %>%
  mutate(strata_var = paste(code, age_group, gender, sep = "_"))

# Step 7: Handle missing values in weights if any
survey_data <- survey_data %>%
  mutate(base_weight = ifelse(is.na(base_weight), 0, base_weight))

# Step 8: Verify the weights
sum(survey_data$base_weight)

```

```{r}
#| echo: false

survey_design <- survey_data |>
  as_survey_design(weights = base_weight,
                   strata = code,
                   ids = id,
                   nest = TRUE)
```


# Demographic Characteristics

## Sample characteristics

::: {.note}
<span class="info-icon">ℹ️</span>
Total sample size is 2,002 and includes a roughly equal number of female and male participants. The majority of participants are aged between 15-19 years. A larger proportion of participants reside in rural areas compared to urban areas. Most participants have completed primary education, with a significant number also having completed secondary education. Only a small proportion have an education level of secondary and above.
:::

```{r}
#| message: false
#| results: hide
#| echo: false

kenya_counties <- 47

counties_surveyed <- survey_data |>
  distinct(county_name) |> pull() |> length()

unweighted_summary_table <- survey_data %>%
  select(age_group, gender, location, education) %>%
  tbl_summary(
    by = gender,
    statistic = list(all_continuous() ~ "{median} ({sd})", all_categorical() ~ "{n} ({p}%)"),
    digits = all_continuous() ~ 2,
    label = list(age_group ~ "Age",
                 location ~ "Location")
  ) %>%
  add_overall() %>%
  modify_header(label ~ "**Characteristic**") %>%
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Gender**") %>%
  as_gt() %>%
  tab_style(
    style = list(cell_borders(sides = "all", color = "gray", weight = px(1)),
                 cell_text(weight = "bold", color = "black")),
    locations = cells_body()
  ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", color = "black"),
      cell_fill(color = "#FFFDD0")
    ),
    locations = cells_column_labels(c(label, stat_0, stat_1, stat_2))
  ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", color = "black"),
      cell_fill(color = "#FFFDD0")
    ),
    locations = cells_column_spanners()
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
  tab_options(data_row.padding = px(2))

```

```{r}
#| echo: false
unweighted_summary_table
```

## Relationship status

::: {.note}
<span class="info-icon">ℹ️</span>
Majority of young people are either single or dating (93%).
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 3


# List of variables to process
variables <- c("Q1_10")

# Mapping variable names to readable titles
variable_titles <- c("Q1_10" = "Relationship status")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- frq(survey_data[[variable]], weights = survey_data$base_weight)
  frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")")) |>
filter(label != "DK/Refused")

y_limit <- max(combined_df$valid.prc) + 0.5 * max(combined_df$valid.prc)
# Plot using facet_wrap with shared axes
ggplot(combined_df, aes(x = reorder(label,valid.prc), y = valid.prc)) +
  geom_bar(stat = "identity", fill = "#FA0005") +
  geom_text(aes(label = label_text), hjust = -0.05) +
  coord_flip() +
  facet_wrap(~ variable, scales = "fixed", labeller = labeller(variable = variable_titles))+
  ylim(0, y_limit)
```

## Own children

::: {.note}
<span class="info-icon">ℹ️</span>
Majority of the respondents do not have children of their own.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 3


# List of variables to process
variables <- c("Q1_14")

# Mapping variable names to readable titles
variable_titles <- c("Q1_14" = "Own children")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- frq(survey_data[[variable]], weights = survey_data$base_weight)
  frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")")) |>
filter(label != "DK/Refused") |>
  mutate(label = val)

y_limit <- max(combined_df$valid.prc) + 0.5 * max(combined_df$valid.prc)
# Plot using facet_wrap with shared axes
ggplot(combined_df, aes(x = reorder(label,valid.prc), y = valid.prc)) +
  geom_bar(stat = "identity", fill = "#FA0005") +
  geom_text(aes(label = label_text), hjust = -0.05) +
  coord_flip() +
  facet_wrap(~ variable, scales = "fixed", labeller = labeller(variable = variable_titles))+
  ylim(0, y_limit)
```

## Biggest change in your life in the past 12 months

::: {.note}
<span class="info-icon">ℹ️</span>
Overall, majority of the respondents experienced a negative change in the past 12 months.
:::

::: {.flex-container}

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 6
#| fig-height: 4

# Step 3: Tokenization
tokens <- survey_data %>%
select(challenge) %>%
filter(!grepl("999", challenge))%>%
  unnest_tokens(word, challenge)

# Step 4: Remove stop words
data(stop_words)
tokens <- tokens %>%
  anti_join(stop_words)

# Step 5: Word frequency
word_freq <- tokens %>%
  count(word, sort = TRUE) |>
mutate(word = str_to_sentence(word))

# Step 6: Plot the most common words
word_freq %>%
  top_n(10) %>%
  ggplot(aes(x = reorder(word, n), y = n)) +
  geom_col(fill = "#FA0005") +
  coord_flip() +
  labs(title = "Most Common Words (top 10)", x = "Words", y = "Frequency")


```

</div>

<div class="flex-item-50">


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 6
#| fig-height: 4

# Step 7: Sentiment Analysis
sentiment <- tokens %>%
  inner_join(get_sentiments("bing")) %>%
  count(sentiment) |>
mutate(sentiment = str_to_sentence(sentiment))

# Plot sentiment analysis
sentiment %>%
  ggplot(aes(x = sentiment, y = n, fill = sentiment)) +
  geom_col() +
  labs(title = "Sentiment Analysis", x = "Sentiment", y = "Count")

```

</div>

:::

## Issues concerned

::: {.note}
<span class="info-icon">ℹ️</span>
Over **60%** of the youth are **very concerned** about unemployment and economy.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


# List of variables to process
variables <- c("T_Q1_16_1", "T_Q1_16_2", "T_Q1_16_3", "T_Q1_16_4", "T_Q1_16_5", "T_Q1_16_6", "T_Q1_16_7", "T_Q1_16_8", "T_Q1_16_9")

# Mapping variable names to readable titles
variable_titles <- c("T_Q1_16_1" = "Terrorism",
                     "T_Q1_16_2" = "Poverty",
                     "T_Q1_16_3" = "Violence/war",
                     "T_Q1_16_4" = "Unemployment",
                     "T_Q1_16_5" = "Climate change",
                     "T_Q1_16_6" = "Crime",
                     "T_Q1_16_7" = "Economy",
                     "T_Q1_16_8" = "Gender inequality",
                     "T_Q1_16_9" = "Migration"
                     )

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- survey_data |> filter(engagement == "Yes") |> filter(persona == "Boni") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
    N <- frq_result[[1]]$n.valid[1] # Extract N
    frq_df %>%
      filter(!is.na(val)) %>%
      mutate(variable = variable, N = N, variable_title = variable_titles[variable]) # Add columns for the variable name, N, and variable title
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))|>
filter(!is.na(label))
# 
# y_limit <- max(combined_df$valid.prc) + 0.4 * max(combined_df$valid.prc)
# # Plot using facet_wrap with shared axes
# ggplot(combined_df, aes(x = reorder(label,valid.prc), y = valid.prc)) +
#   geom_bar(stat = "identity", fill = "#FA0005") +
#   geom_text(aes(label = label_text), hjust = -0.05) +
#   coord_flip() +
#   facet_wrap(~ variable, scales = "fixed", labeller = labeller(variable = variable_titles))+
#   ylim(0, 50)
```


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10

viz_likert_percent <- combined_df %>%
  select(variable_title, label, valid.prc) %>%
  pivot_wider(
    names_from = label,
    values_from = valid.prc
  )  |>
mutate(Data = "Percent")

viz_likert_number <- combined_df %>%
  select(variable_title, label, frq) %>%
  pivot_wider(
    names_from = label,
    values_from = frq
  )  |>
mutate(Data = "Number")

bind_rows(viz_likert_percent, viz_likert_number) |>
gt(rowname_col = "Data",
groupname_col = "variable_title") %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = everything()
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(1))



```



# Media Consumption

## Consumption Frequency

::: {.note}
<span class="info-icon">ℹ️</span>
Most youth watch broadcast TV, watch movies, listen to radio, use internet and visit social networking sites.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


# List of variables to process
variables <- c("T_Q2_1_1", "T_Q2_1_2", "T_Q2_1_3", "T_Q2_1_4", "T_Q2_1_5", "T_Q2_1_6", "T_Q2_1_7")

# Mapping variable names to readable titles
variable_titles <- c("T_Q2_1_1" = "Watch broadcast TV",
                     "T_Q2_1_2" = "Watch movies",
                     "T_Q2_1_3" = "Listen to the radio",
                     "T_Q2_1_4" = "Read local newspapers",
                     "T_Q2_1_5" = "Read local cartoon booklets",
                     "T_Q2_1_6" = "Use the internet (excluding social networking sites)",
                     "T_Q2_1_7" = "Visit social networking sites"
                     )

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- survey_data |> filter(engagement == "Yes") |> filter(persona == "Boni") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
    N <- frq_result[[1]]$n.valid[1] # Extract N
    frq_df %>%
      filter(!is.na(val)) %>%
      mutate(variable = variable, N = N, variable_title = variable_titles[variable]) # Add columns for the variable name, N, and variable title
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))|>
filter(!is.na(label))
# 
# y_limit <- max(combined_df$valid.prc) + 0.4 * max(combined_df$valid.prc)
# # Plot using facet_wrap with shared axes
# ggplot(combined_df, aes(x = reorder(label,valid.prc), y = valid.prc)) +
#   geom_bar(stat = "identity", fill = "#FA0005") +
#   geom_text(aes(label = label_text), hjust = -0.05) +
#   coord_flip() +
#   facet_wrap(~ variable, scales = "fixed", labeller = labeller(variable = variable_titles))+
#   ylim(0, 50)
```


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10

viz_likert_percent <- combined_df %>%
  select(variable_title, label, valid.prc) %>%
  pivot_wider(
    names_from = label,
    values_from = valid.prc
  )  |>
mutate(Data = "Percent")

viz_likert_number <- combined_df %>%
  select(variable_title, label, frq) %>%
  pivot_wider(
    names_from = label,
    values_from = frq
  )  |>
mutate(Data = "Number")

bind_rows(viz_likert_percent, viz_likert_number) |>
gt(rowname_col = "Data",
groupname_col = "variable_title") %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = everything()
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(1))



```

## Mobile phone ownership

::: {.note}
<span class="info-icon">ℹ️</span>
This analysis is for all survey respondents.
:::

::: {.flex-container}

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4
#| fig-height: 2


owns_mobile <- survey_data |>
frq(Q2_3, weights = base_weight)
    
owns_mobile <- as.data.frame(owns_mobile[[1]]) |>
filter(!is.na(val))

with_phone_number <- owns_mobile %>%
  filter(label == "Yes") %>%
  pull(frq)

with_phone_prop <- owns_mobile %>%
  filter(label == "Yes") %>%
  pull(valid.prc)


ggplot(owns_mobile, aes(x = 2, y = valid.prc, fill = label)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  theme_void() +
  theme(legend.position = "none") +
  xlim(0.5, 2.5) +
  geom_text(aes(label = ifelse(label == "Yes", 
  paste0(label_percent()(with_phone_prop/100)), "")), 
            position = position_stack(vjust = 0.5), color = "black")+
  scale_fill_manual(values = c("Yes" = "#FA0005", "No" = "darkgray"),
                    name = "Legend") +
labs(
    title = "Mobile Phone Ownership"
  )
```

- Basic phone – only allows calling, messaging, saving numbers
- Feature phone – has camera, radio, basic internet
- Smartphone – has a touch screen, mobile applications, e.g., WhatsApp, Instagram, TikTok



</div>

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4
#| fig-height: 2

# Basic
basic_phones <- survey_data |>
frq(T_Q2_4_1, weights = base_weight)

basic_phones_df <- as.data.frame(basic_phones[[1]]) |>
filter(!is.na(val)) |>
transmute(Type = "Basic phone",
`# phones` = val,
Percentage = valid.prc,
Number = frq)

# Feature
feature_phones <- survey_data |>
frq(T_Q2_4_2, weights = base_weight)

feature_phones_df <- as.data.frame(feature_phones[[1]]) |>
filter(!is.na(val)) |>
transmute(Type = "Feature phone",
`# phones` = val,
Percentage = valid.prc,
Number = frq)


# Smartphone
smartphones <- survey_data |>
frq(T_Q2_4_3, weights = base_weight)

smartphones_df <- as.data.frame(smartphones[[1]]) |>
filter(!is.na(val)) |>
transmute(Type = "Smartphone",
`# phones` = val,
Percentage = valid.prc,
Number = frq)


mobile_type_df <- bind_rows(basic_phones_df, feature_phones_df, smartphones_df)

mobile_type_df |>
gt(groupname_col = "Type") %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = everything()
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(0.5))


```

</div>

:::


# Reach

## Overall reach

```{r}
#| echo: false
#| message: false
#| warning: false

# Awareness
awareness_summary <- survey_design %>%
  group_by(awareness) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(awareness = case_when(
    awareness == "Yes" ~ "Aware",
    awareness == "No" ~ "Unaware",
    TRUE ~ NA_character_
  ))

overall_aware_total <- awareness_summary %>%
  filter(awareness == "Aware") %>%
  pull(total)

overall_aware_prop <- awareness_summary %>%
  filter(awareness == "Aware") %>%
  pull(proportion)



awareness_summary_persona <- survey_design %>%
  group_by(persona, awareness) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(awareness = case_when(
    awareness == "Yes" ~ "Aware",
    awareness == "No" ~ "Unaware",
    TRUE ~ NA_character_
  ))


```


::: {.flex-container}

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4
#| fig-height: 2

ggplot(awareness_summary, aes(x = 2, y = proportion, fill = awareness)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  theme_void() +
  theme(legend.position = "none") +
  xlim(0.5, 2.5) +
  geom_text(aes(label = ifelse(awareness == "Aware", 
  paste0(label_percent()(overall_aware_prop)), "")), 
            position = position_stack(vjust = 0.5), color = "black")+
  scale_fill_manual(values = c("Aware" = "#FA0005", "Unaware" = "darkgray"),
                    name = "Legend") +
labs(
    title = "Percent reached"
  )
```

</div>

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4
#| fig-height: 2

ggplot(awareness_summary, aes(x = 2, y = total, fill = awareness)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  theme_void() +
  theme(legend.position = "none") +
  xlim(0.5, 2.5) +
  geom_text(aes(label = ifelse(awareness == "Aware", 
  paste0(comma((overall_aware_total))), "")), 
            position = position_stack(vjust = 0.5), color = "black")+
  scale_fill_manual(values = c("Aware" = "#FA0005", "Unaware" = "darkgray"),
                    name = "Legend") +
labs(
    title = "Number reached"
  )
```

</div>

:::

**`r comma(overall_aware_total)`** (**`r label_percent()(overall_aware_prop)`**) young people are aware of Shujaaz media.

::: {.note}
<span class="info-icon">ℹ️</span>
These results include prompted and un-prompted.
:::

## Reach by persona

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 6
#| fig-height: 4


awareness_summary_persona |>
ggplot(aes(x = persona, y = proportion, 
             fill = fct_rev(awareness))) +
  geom_col(position = "fill", color = "white") +
  geom_text(aes(label = label_percent(accuracy=1)(proportion)), 
            position = position_fill(vjust = 0.5),color = "white") +  # Adjust size and color as needed
  scale_fill_manual(
    values = c("darkgrey", "#FA0005"),
    guide = guide_legend(reverse = TRUE)
  ) +
  scale_y_continuous(labels = label_percent()) +
  labs(
    title = "Awareness by Persona",
    y = NULL,
    x = NULL,
    fill = "Legend"
  ) 
```


```{r}
#| echo: false
#| message: false
#| warning: false

# test for equality of brand awareness
persona_awareness_test <- survey_design %>%
  drop_na(awareness, persona) %>%
  svychisq(
    formula = ~ persona + awareness,
    design = .,
    statistic = "Chisq",
    na.rm = TRUE
  )
```

::: {.note}
<span class="info-icon">ℹ️</span>
Brand awareness across all personas was largely similar, as the differences were not statistically significant (p-value = 0.3294).
:::



## Reach by location
```{r}
#| echo: false
#| message: false
#| warning: false

awareness_summary_location <- survey_design %>%
  group_by(location, awareness) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(awareness = case_when(
    awareness == "Yes" ~ "Aware",
    awareness == "No" ~ "Unaware",
    TRUE ~ NA_character_
  )) |>
rename(Location = location) |>
ungroup()
```


```{r}
#| echo: false
#| message: false
#| warning: false

# test for equality of awareness
location_awareness_test <- survey_design %>%
  drop_na(location, awareness) %>%
  svychisq(
    formula = ~ location + awareness,
    design = .,
    statistic = "Chisq",
    na.rm = TRUE
  )
```


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 4

ggplot(awareness_summary_location, aes(x=awareness, y=proportion, fill=Location)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=proportion-proportion_se, ymax=proportion+proportion_se), width=0.2, position=position_dodge(0.9)) +
  geom_text(aes(label=label_percent()(round(proportion, 2))), vjust=-0.5, position=position_dodge(0.9)) +
  labs(title="Reach by location", x="Awareness", y="Proportion")

```



::: {.note}
<span class="info-icon">ℹ️</span>
There is strong evidence to suggest that brand awareness levels vary location (p-value < 0.001).
:::




## Reach by county

```{r}
#| echo: false
#| message: false
#| warning: false

awareness_summary_county <- survey_design %>%
  group_by(county_name, awareness) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(awareness = case_when(
    awareness == "Yes" ~ "Aware",
    awareness == "No" ~ "Unaware",
    TRUE ~ NA_character_
  )) |>
rename(County = county_name) |>
ungroup()
```


```{r}
#| echo: false
#| message: false
#| warning: false

awareness_summary_wide <- awareness_summary_county %>%
  select(County, awareness, total) %>%
  pivot_wider(names_from = awareness, values_from = total,values_fill = list(total = 0))
  
# Step 3: Calculate the `% Aware`
awareness_table <- awareness_summary_wide %>%
  mutate(`% Aware` = `Aware` / (`Aware` + `Unaware`)) %>%
  select(County, `% Aware`, `Aware`, `Unaware`) |>
  arrange(`% Aware`)

# Define a function to generate the color based on the value
color_fill <- function(x) {
  scales::col_numeric(
    palette = colorRampPalette(c("white", "lightblue"))(10), 
    domain = c(0, 1)
  )(x)
}

# Create a gt table with dynamic color fill
create_awareness_table <- function(data) {
data %>%
  gt() %>%
  # tab_header(
  #   title = "Awareness by County"
  # ) %>%
  data_color(
    columns = c(`% Aware`),
    colors = color_fill
  ) %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
  cols_label(
    County = "County",
    `% Aware` = "% Aware",
    Aware = "Aware",
    Unaware = "Unaware"
  ) %>%
  fmt_percent(
    columns = c(`% Aware`),
    decimals = 0
  ) %>%
fmt_number(
      columns = c(Aware, Unaware),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "left",
    columns = c("County")
  ) %>%
cols_align(
    align = "right",
    columns = -c("County")
  ) %>%
  opt_table_font(
    font = "Arial"
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(1))
}

```


```{r}
#| echo: false
#| message: false
#| warning: false

# test for equality of awareness
county_awareness_test <- survey_design %>%
  drop_na(awareness, county_name) %>%
  svychisq(
    formula = ~ county_name + awareness,
    design = .,
    statistic = "Chisq",
    na.rm = TRUE
  )
```


::: {.flex-container}

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false

create_awareness_table(awareness_table |> slice(1:22))
```

</div>

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false

create_awareness_table(awareness_table |> slice(23:43))
```

</div>

:::


::: {.note}
<span class="info-icon">ℹ️</span>
There is strong evidence that brand awareness levels vary by county (p-value < 0.001).
:::


# Engagement

## Overall engagement 

```{r}
#| echo: false
#| message: false
#| warning: false

# Awareness
engagement_summary <- survey_design %>%
  group_by(engagement) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(engagement = case_when(
    engagement == "Yes" ~ "Ever engaged",
    engagement == "No" ~ "Never enngaged",
    TRUE ~ NA_character_
  ))

overall_engaged_total <- engagement_summary %>%
  filter(engagement == "Ever engaged") %>%
  pull(total)

overall_engaged_prop <- engagement_summary %>%
  filter(engagement == "Ever engaged") %>%
  pull(proportion)



engagement_summary_persona <- survey_design %>%
  group_by(persona, engagement) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(engagement = case_when(
    engagement == "Yes" ~ "Ever engaged",
    engagement == "No" ~ "Never enngaged",
    TRUE ~ NA_character_
  ))


```


::: {.flex-container}

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4
#| fig-height: 2

ggplot(engagement_summary, aes(x = 2, y = proportion, fill = engagement)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  theme_void() +
  theme(legend.position = "none") +
  xlim(0.5, 2.5) +
  geom_text(aes(label = ifelse(engagement == "Ever engaged", 
  paste0(label_percent()(overall_engaged_prop)), "")), 
            position = position_stack(vjust = 0.5), color = "black")+
  scale_fill_manual(values = c("Ever engaged" = "#FA0005", "Never engaged" = "darkgray"),
                    name = "Legend") +
labs(
    title = "Percent of users"
  )
```

</div>

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4
#| fig-height: 2

ggplot(engagement_summary, aes(x = 2, y = total, fill = engagement)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  theme_void() +
  theme(legend.position = "none") +
  xlim(0.5, 2.5) +
  geom_text(aes(label = ifelse(engagement == "Ever engaged", 
  paste0(comma((overall_engaged_total))), "")), 
            position = position_stack(vjust = 0.5), color = "black")+
  scale_fill_manual(values = c("Ever engaged" = "#FA0005", "Never engaged" = "darkgray"),
                    name = "Legend") +
labs(
    title = "Number of users"
  )
```

</div>

:::

**`r comma(overall_engaged_total)`** (**`r label_percent()(overall_engaged_prop)`**) young people have ever engaged with Shujaaz brand.

::: {.note}
<span class="info-icon">ℹ️</span>
These results include those aware and not aware of Shujaaz brand.
:::

## Engagement by persona

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 4


engagement_summary_persona |>
ggplot(aes(x = persona, y = proportion, 
             fill = fct_rev(engagement))) +
  geom_col(position = "fill", color = "white") +
  geom_text(aes(label = label_percent(accuracy=1)(proportion)), 
            position = position_fill(vjust = 0.5),color = "white") +  # Adjust size and color as needed
  scale_fill_manual(
    values = c("darkgrey", "#FA0005"),
    guide = guide_legend(reverse = TRUE)
  ) +
  scale_y_continuous(labels = label_percent()) +
  labs(
    title = "Engagement by Persona",
    y = NULL,
    x = NULL,
    fill = "Legend"
  ) 
```

```{r}
#| echo: false
#| message: false
#| warning: false

# test for equality of brand awareness
persona_engagement_test <- survey_design %>%
  drop_na(engagement, persona) %>%
  svychisq(
    formula = ~ persona + engagement,
    design = .,
    statistic = "Chisq",
    na.rm = TRUE
  )
```


::: {.note}
<span class="info-icon">ℹ️</span>
Brand engagement across all personas was largely similar, as the differences were not statistically significant (p-value = 0.4605).
:::


## Engagement by location
```{r}
#| echo: false
#| message: false
#| warning: false

engagement_summary_location <- survey_design %>%
  group_by(location, engagement) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(engagement = case_when(
    engagement == "Yes" ~ "Ever engaged",
    engagement == "No" ~ "Never engaged",
    TRUE ~ NA_character_
  )) |>
rename(Location = location) |>
ungroup()
```


```{r}
#| echo: false
#| message: false
#| warning: false

# test for equality of awareness
location_engagement_test <- survey_design %>%
  drop_na(location, engagement) %>%
  svychisq(
    formula = ~ location + engagement,
    design = .,
    statistic = "Chisq",
    na.rm = TRUE
  )
```


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 4

ggplot(engagement_summary_location, aes(x=engagement, y=proportion, fill=Location)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=proportion-proportion_se, ymax=proportion+proportion_se), width=0.2, position=position_dodge(0.9)) +
  geom_text(aes(label=label_percent()(round(proportion, 2))), vjust=-0.5, position=position_dodge(0.9)) +
  labs(title="Engagement by location", x="Awareness", y="Proportion")

```



::: {.note}
<span class="info-icon">ℹ️</span>
There is strong evidence to suggest that brand engagement levels vary by location (p-value < 0.001).
:::


## Engagement by county

```{r}
#| echo: false
#| message: false
#| warning: false

engagement_summary_county <- survey_design %>%
  group_by(county_name, engagement) %>%
  summarize(proportion = survey_prop(na.rm = TRUE),
            total = survey_total(na.rm = TRUE)) %>%
  mutate(engagement = case_when(
    engagement == "Yes" ~ "Ever engaged",
    engagement == "No" ~ "Never engaged",
    TRUE ~ NA_character_
  )) |>
rename(County = county_name) |>
ungroup()
```


```{r}
#| echo: false
#| message: false
#| warning: false

engagement_summary_wide <- engagement_summary_county %>%
  select(County, engagement, total) %>%
  pivot_wider(names_from = engagement, values_from = total,values_fill = list(total = 0))
  
# Step 3: Calculate the `% Aware`
engagement_table <- engagement_summary_wide %>%
  mutate(`% Engaged` = `Ever engaged` / (`Ever engaged` + `Never engaged`)) %>%
  select(County, `% Engaged`, `Ever engaged`, `Never engaged`) |>
  arrange(`% Engaged`)

# Define a function to generate the color based on the value
color_fill <- function(x) {
  scales::col_numeric(
    palette = colorRampPalette(c("white", "lightblue"))(10), 
    domain = c(0, 1)
  )(x)
}

# Create a gt table with dynamic color fill
create_engagement_table <- function(data) {
data %>%
  gt() %>%
  # tab_header(
  #   title = "Awareness by County"
  # ) %>%
  data_color(
    columns = c(`% Engaged`),
    colors = color_fill
  ) %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
  cols_label(
    County = "County",
    `% Engaged` = "% Engaged",
    `Ever engaged` = "Engaged",
    `Never engaged` = "Unengaged"
  ) %>%
  fmt_percent(
    columns = c(`% Engaged`),
    decimals = 0
  ) %>%
fmt_number(
      columns = c(`Ever engaged`, `Never engaged`),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "left",
    columns = c("County")
  ) %>%
cols_align(
    align = "right",
    columns = -c("County")
  ) %>%
  opt_table_font(
    font = "Arial"
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(1))
}

```


```{r}
#| echo: false
#| message: false
#| warning: false

# test for equality of engagement
county_engagement_test <- survey_design %>%
  drop_na(awareness, county_name) %>%
  svychisq(
    formula = ~ county_name + engagement,
    design = .,
    statistic = "Chisq",
    na.rm = TRUE
  )
```


::: {.flex-container}

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false

create_engagement_table(engagement_table |> slice(1:21))
```

</div>

<div class="flex-item-50">

```{r}
#| echo: false
#| message: false
#| warning: false

create_engagement_table(engagement_table |> slice(22:43))
```

</div>

:::


::: {.note}
<span class="info-icon">ℹ️</span>
There is strong evidence that brand engagement levels vary by county (p-value < 0.001).
:::



## Media usage
::: {.note}
<span class="info-icon">ℹ️</span>
For this analysis, respondents were asked about the frequency using Shujaaz media across various platforms. Those who refused or dont know are included in the calculations but excluded from the visuals.
:::

### Comic

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 3


# List of variables to process
variables <- c("T_Q3_6_1")

# Mapping variable names to readable titles
variable_titles <- c("T_Q3_6_1" = "Read Comic")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- frq(survey_data[[variable]], weights = survey_data$base_weight)
  frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")")) |>
filter(label != "DK/Refused")

y_limit <- max(combined_df$valid.prc) + 0.3 * max(combined_df$valid.prc)
# Plot using facet_wrap with shared axes
ggplot(combined_df, aes(x = reorder(label,valid.prc), y = valid.prc)) +
  geom_bar(stat = "identity", fill = "#FA0005") +
  geom_text(aes(label = label_text), hjust = -0.05) +
  coord_flip() +
  facet_wrap(~ variable, scales = "fixed", labeller = labeller(variable = variable_titles))+
  ylim(0, y_limit)


```

### Watched STRA

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 3


# List of variables to process
variables <- c("T_Q3_6_8")

# Mapping variable names to readable titles
variable_titles <- c("T_Q3_6_8" = "Watched STRA")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- frq(survey_data[[variable]], weights = survey_data$base_weight)
  frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")")) |>
filter(label != "DK/Refused")

y_limit <- max(combined_df$valid.prc) + 0.4 * max(combined_df$valid.prc)

# Plot using facet_wrap with shared axes
ggplot(combined_df, aes(x = reorder(label,valid.prc), y = valid.prc)) +
  geom_bar(stat = "identity", fill = "#FA0005") +
  geom_text(aes(label = label_text), hjust = -0.05) +
  coord_flip() +
  facet_wrap(~ variable, scales = "fixed", labeller = labeller(variable = variable_titles))+
  ylim(0, y_limit)


```



### Shujaaz Kenya

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10

# List of variables to process
variables <- c("T_Q3_6_2", "T_Q3_6_3","T_Q3_6_9", "T_Q3_6_10")

# Mapping variable names to readable titles
variable_titles <- c("T_Q3_6_2" = "Shujaaz Facebook",
                     "T_Q3_6_3" = "Shujaaz Instagram",
                     "T_Q3_6_9" = "Shujaaz YouTube",
                     "T_Q3_6_10" = "Shujaaz TikTok"
)

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- frq(survey_data[[variable]], weights = survey_data$base_weight)
  frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))|>
filter(label != "DK/Refused")

y_limit <- max(combined_df$valid.prc) + 0.3 * max(combined_df$valid.prc)
# Plot using facet_wrap with shared axes
ggplot(combined_df, aes(x = reorder(label,valid.prc), y = valid.prc)) +
  geom_bar(stat = "identity", fill = "#FA0005") +
  geom_text(aes(label = label_text), hjust = -0.05) +
  coord_flip() +
  facet_wrap(~ variable, scales = "fixed", labeller = labeller(variable = variable_titles))+
  ylim(0, 50)



```


### Shujaaz Biz

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 3


# List of variables to process
variables <- c("T_Q3_6_16")

# Mapping variable names to readable titles
variable_titles <- c("T_Q3_6_16" = "Shujaaz Biz Facebook")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- frq(survey_data[[variable]], weights = survey_data$base_weight)
  frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")")) |>
filter(label != "DK/Refused")

y_limit <- max(combined_df$valid.prc) + 0.5 * max(combined_df$valid.prc)

# Plot using facet_wrap with shared axes
ggplot(combined_df, aes(x = reorder(label,valid.prc), y = valid.prc)) +
  geom_bar(stat = "identity", fill = "#FA0005") +
  geom_text(aes(label = label_text), hjust = -0.05) +
  coord_flip() +
  facet_wrap(~ variable, scales = "fixed", labeller = labeller(variable = variable_titles))+
  ylim(0, y_limit)


```

### SMS Usage

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 3


# List of variables to process
variables <- c("T_Q3_6_17")

# Mapping variable names to readable titles
variable_titles <- c("T_Q3_6_17" = "SMS to DJ B, Maria Kim, Malkia, or Charlie Pele")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- frq(survey_data[[variable]], weights = survey_data$base_weight)
  frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")")) |>
filter(label != "DK/Refused")

y_limit <- max(combined_df$valid.prc) + 0.5 * max(combined_df$valid.prc)

# Plot using facet_wrap with shared axes
ggplot(combined_df, aes(x = reorder(label,valid.prc), y = valid.prc)) +
  geom_bar(stat = "identity", fill = "#FA0005") +
  geom_text(aes(label = label_text), hjust = -0.05) +
  coord_flip() +
  facet_wrap(~ variable, scales = "fixed", labeller = labeller(variable = variable_titles))+
  ylim(0, y_limit)


```

### Maria Kim

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 3


# List of variables to process
variables <- c("T_Q3_6_13")

# Mapping variable names to readable titles
variable_titles <- c("T_Q3_6_13" = "Maria Kim's Facebook and/or Instagram")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- frq(survey_data[[variable]], weights = survey_data$base_weight)
  frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")")) |>
filter(label != "DK/Refused")

y_limit <- max(combined_df$valid.prc) + 0.5 * max(combined_df$valid.prc)

# Plot using facet_wrap with shared axes
ggplot(combined_df, aes(x = reorder(label,valid.prc), y = valid.prc)) +
  geom_bar(stat = "identity", fill = "#FA0005") +
  geom_text(aes(label = label_text), hjust = -0.05) +
  coord_flip() +
  facet_wrap(~ variable, scales = "fixed", labeller = labeller(variable = variable_titles))+
  ylim(0, y_limit)


```


### Malkia

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 3


# List of variables to process
variables <- c("T_Q3_6_14")

# Mapping variable names to readable titles
variable_titles <- c("T_Q3_6_14" = "Malkia’s Facebook and/or Instagram")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- frq(survey_data[[variable]], weights = survey_data$base_weight)
  frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")")) |>
filter(label != "DK/Refused")

y_limit <- max(combined_df$valid.prc) + 0.5 * max(combined_df$valid.prc)

# Plot using facet_wrap with shared axes
ggplot(combined_df, aes(x = reorder(label,valid.prc), y = valid.prc)) +
  geom_bar(stat = "identity", fill = "#FA0005") +
  geom_text(aes(label = label_text), hjust = -0.05) +
  coord_flip() +
  facet_wrap(~ variable, scales = "fixed", labeller = labeller(variable = variable_titles))+
  ylim(0, y_limit)


```


### Charlie Pele

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 3


# List of variables to process
variables <- c("T_Q3_6_15")

# Mapping variable names to readable titles
variable_titles <- c("T_Q3_6_15" = "Charlie Pele’s Facebook and/or Instagram")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- frq(survey_data[[variable]], weights = survey_data$base_weight)
  frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")")) |>
filter(label != "DK/Refused")

y_limit <- max(combined_df$valid.prc) + 0.5 * max(combined_df$valid.prc)

# Plot using facet_wrap with shared axes
ggplot(combined_df, aes(x = reorder(label,valid.prc), y = valid.prc)) +
  geom_bar(stat = "identity", fill = "#FA0005") +
  geom_text(aes(label = label_text), hjust = -0.05) +
  coord_flip() +
  facet_wrap(~ variable, scales = "fixed", labeller = labeller(variable = variable_titles))+
  ylim(0, y_limit)


```


### DJB
```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10

# List of variables to process
variables <- c("T_Q3_6_4", "T_Q3_6_5","T_Q3_6_6", "T_Q3_6_6", "T_Q3_6_7")

# Mapping variable names to readable titles
variable_titles <- c("T_Q3_6_4" = "DJB Facebook",
                     "T_Q3_6_5" = "DJB Twitter",
                     "T_Q3_6_6" = "DJB Instagram",
                     "T_Q3_6_7" = "DJB WhatsApp"
)

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- frq(survey_data[[variable]], weights = survey_data$base_weight)
  frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))|>
filter(label != "DK/Refused")

y_limit <- max(combined_df$valid.prc) + 0.3 * max(combined_df$valid.prc)
# Plot using facet_wrap with shared axes
ggplot(combined_df, aes(x = reorder(label,valid.prc), y = valid.prc)) +
  geom_bar(stat = "identity", fill = "#FA0005") +
  geom_text(aes(label = label_text), hjust = -0.05) +
  coord_flip() +
  facet_wrap(~ variable, scales = "fixed", labeller = labeller(variable = variable_titles))+
  ylim(0, 50)

```

# Agency Models

## Sense of self-belief
### Users

#### All personas

::: {.note}
<span class="info-icon">ℹ️</span>
The chart below is for all personas who have ever engaged with Shujaaz media.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10

# List of variables to process
variables <- c("T_AM1_1", "T_AM1_2", "T_AM1_3", "T_AM1_4", "T_AM1_5", "T_AM1_6", "T_AM1_7", "T_AM1_8")

# Mapping variable names to readable titles
variable_titles <- c("T_AM1_1" = "I will be able to achieve most of the goals that I set for myself",
                     "T_AM1_2" = "When facing difficult tasks, I am certain that I will accomplish them",
                     "T_AM1_3" = "I think that I can obtain outcomes that are important to me",
                     "T_AM1_4" = "I believe I can succeed at most any endeavor to which I set my mind",
                     "T_AM1_5" = "I will be able to successfully overcome many challenges",
                     "T_AM1_6" = "I am confident that I can perform effectively on many different tasks",
                     "T_AM1_7" = "Compared to other people, I can do most tasks very well",
                     "T_AM1_8" = "Even when things are tough, I can perform quite well")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- survey_data |> filter(engagement == "Yes") |> 
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
    N <- frq_result[[1]]$n.valid[1] # Extract N
    frq_df %>%
      filter(!is.na(val)) %>%
      mutate(variable = variable, N = N, variable_title = variable_titles[variable]) # Add columns for the variable name, N, and variable title
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))

# summary data
viz_likert <- combined_df %>%
  select(variable_title, label, valid.prc) %>%
  pivot_wider(
    names_from = label,
    values_from = valid.prc
  ) |>
rename(Neutral = `Neither agree nor disagree`,
Item = variable_title) |>
select(Item, `Strongly disagree`, Disagree, Neutral, Agree, `Strongly agree`)

# Plot the chart
plot(likert(summary = viz_likert), 
plot.percent.neutral=FALSE, 
legend.position="top",
low.color = "#5AB4AC", 
high.color = "#FA0005", 
Neutral.color.ramp = "white", 
Neutral.color = "grey90")
```


```{r}
#| echo: false
#| message: false
#| warning: false


viz_likert %>%
rename(Indicator = Item) |>
  gt() %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "left",
    columns = c("Indicator")
  ) %>%
cols_align(
    align = "right",
    columns = -c("Indicator")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(2))
```


#### Barasa

::: {.note}
<span class="info-icon">ℹ️</span>
The chart below is for all Barasa ever engaged with Shujaaz media.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10

# List of variables to process
variables <- c("T_AM1_1", "T_AM1_2", "T_AM1_3", "T_AM1_4", "T_AM1_5", "T_AM1_6", "T_AM1_7", "T_AM1_8")

# Mapping variable names to readable titles
variable_titles <- c("T_AM1_1" = "I will be able to achieve most of the goals that I set for myself",
                     "T_AM1_2" = "When facing difficult tasks, I am certain that I will accomplish them",
                     "T_AM1_3" = "I think that I can obtain outcomes that are important to me",
                     "T_AM1_4" = "I believe I can succeed at most any endeavor to which I set my mind",
                     "T_AM1_5" = "I will be able to successfully overcome many challenges",
                     "T_AM1_6" = "I am confident that I can perform effectively on many different tasks",
                     "T_AM1_7" = "Compared to other people, I can do most tasks very well",
                     "T_AM1_8" = "Even when things are tough, I can perform quite well")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- survey_data |> filter(engagement == "Yes") |> filter(persona == "Barasa") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
    N <- frq_result[[1]]$n.valid[1] # Extract N
    frq_df %>%
      filter(!is.na(val)) %>%
      mutate(variable = variable, N = N, variable_title = variable_titles[variable]) # Add columns for the variable name, N, and variable title
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))

# summary data
viz_likert <- combined_df %>%
  select(variable_title, label, valid.prc) %>%
  pivot_wider(
    names_from = label,
    values_from = valid.prc
  ) |>
rename(Neutral = `Neither agree nor disagree`,
Item = variable_title) |>
select(Item, `Strongly disagree`, Disagree, Neutral, Agree, `Strongly agree`)

# Plot the chart
plot(likert(summary = viz_likert), 
plot.percent.neutral=FALSE, 
legend.position="top",
low.color = "#5AB4AC", 
high.color = "#FA0005", 
Neutral.color.ramp = "white", 
Neutral.color = "grey90")
```


```{r}
#| echo: false
#| message: false
#| warning: false


viz_likert %>%
rename(Indicator = Item) |>
  gt() %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "left",
    columns = c("Indicator")
  ) %>%
cols_align(
    align = "right",
    columns = -c("Indicator")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(2))
```




#### Boni

::: {.note}
<span class="info-icon">ℹ️</span>
The chart below is for all Boni ever engaged with Shujaaz media.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10

# List of variables to process
variables <- c("T_AM1_1", "T_AM1_2", "T_AM1_3", "T_AM1_4", "T_AM1_5", "T_AM1_6", "T_AM1_7", "T_AM1_8")

# Mapping variable names to readable titles
variable_titles <- c("T_AM1_1" = "I will be able to achieve most of the goals that I set for myself",
                     "T_AM1_2" = "When facing difficult tasks, I am certain that I will accomplish them",
                     "T_AM1_3" = "I think that I can obtain outcomes that are important to me",
                     "T_AM1_4" = "I believe I can succeed at most any endeavor to which I set my mind",
                     "T_AM1_5" = "I will be able to successfully overcome many challenges",
                     "T_AM1_6" = "I am confident that I can perform effectively on many different tasks",
                     "T_AM1_7" = "Compared to other people, I can do most tasks very well",
                     "T_AM1_8" = "Even when things are tough, I can perform quite well")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- survey_data |> filter(engagement == "Yes") |> filter(persona == "Boni") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
    N <- frq_result[[1]]$n.valid[1] # Extract N
    frq_df %>%
      filter(!is.na(val)) %>%
      mutate(variable = variable, N = N, variable_title = variable_titles[variable]) # Add columns for the variable name, N, and variable title
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))

# summary data
viz_likert <- combined_df %>%
  select(variable_title, label, valid.prc) %>%
  pivot_wider(
    names_from = label,
    values_from = valid.prc
  ) |>
rename(Neutral = `Neither agree nor disagree`,
Item = variable_title) |>
select(Item, `Strongly disagree`, Disagree, Neutral, Agree, `Strongly agree`)

# Plot the chart
plot(likert(summary = viz_likert), 
plot.percent.neutral=FALSE, 
legend.position="top",
low.color = "#5AB4AC", 
high.color = "#FA0005", 
Neutral.color.ramp = "white", 
Neutral.color = "grey90")
```


```{r}
#| echo: false
#| message: false
#| warning: false


viz_likert %>%
rename(Indicator = Item) |>
  gt() %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "left",
    columns = c("Indicator")
  ) %>%
cols_align(
    align = "right",
    columns = -c("Indicator")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(2))
```



#### Nana

::: {.note}
<span class="info-icon">ℹ️</span>
The chart below is for all Nana ever engaged with Shujaaz media.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10

# List of variables to process
variables <- c("T_AM1_1", "T_AM1_2", "T_AM1_3", "T_AM1_4", "T_AM1_5", "T_AM1_6", "T_AM1_7", "T_AM1_8")

# Mapping variable names to readable titles
variable_titles <- c("T_AM1_1" = "I will be able to achieve most of the goals that I set for myself",
                     "T_AM1_2" = "When facing difficult tasks, I am certain that I will accomplish them",
                     "T_AM1_3" = "I think that I can obtain outcomes that are important to me",
                     "T_AM1_4" = "I believe I can succeed at most any endeavor to which I set my mind",
                     "T_AM1_5" = "I will be able to successfully overcome many challenges",
                     "T_AM1_6" = "I am confident that I can perform effectively on many different tasks",
                     "T_AM1_7" = "Compared to other people, I can do most tasks very well",
                     "T_AM1_8" = "Even when things are tough, I can perform quite well")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- survey_data |> filter(engagement == "Yes") |> filter(persona == "Nana") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
    N <- frq_result[[1]]$n.valid[1] # Extract N
    frq_df %>%
      filter(!is.na(val)) %>%
      mutate(variable = variable, N = N, variable_title = variable_titles[variable]) # Add columns for the variable name, N, and variable title
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))

# summary data
viz_likert <- combined_df %>%
  select(variable_title, label, valid.prc) %>%
  pivot_wider(
    names_from = label,
    values_from = valid.prc
  ) |>
rename(Neutral = `Neither agree nor disagree`,
Item = variable_title) |>
select(Item, `Strongly disagree`, Disagree, Neutral, Agree, `Strongly agree`)

# Plot the chart
plot(likert(summary = viz_likert), 
plot.percent.neutral=FALSE, 
legend.position="top",
low.color = "#5AB4AC", 
high.color = "#FA0005", 
Neutral.color.ramp = "white", 
Neutral.color = "grey90")
```


```{r}
#| echo: false
#| message: false
#| warning: false


viz_likert %>%
rename(Indicator = Item) |>
  gt() %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "left",
    columns = c("Indicator")
  ) %>%
cols_align(
    align = "right",
    columns = -c("Indicator")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(2))
```


#### Nina

::: {.note}
<span class="info-icon">ℹ️</span>
The chart below is for all Nina ever engaged with Shujaaz media.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10

# List of variables to process
variables <- c("T_AM1_1", "T_AM1_2", "T_AM1_3", "T_AM1_4", "T_AM1_5", "T_AM1_6", "T_AM1_7", "T_AM1_8")

# Mapping variable names to readable titles
variable_titles <- c("T_AM1_1" = "I will be able to achieve most of the goals that I set for myself",
                     "T_AM1_2" = "When facing difficult tasks, I am certain that I will accomplish them",
                     "T_AM1_3" = "I think that I can obtain outcomes that are important to me",
                     "T_AM1_4" = "I believe I can succeed at most any endeavor to which I set my mind",
                     "T_AM1_5" = "I will be able to successfully overcome many challenges",
                     "T_AM1_6" = "I am confident that I can perform effectively on many different tasks",
                     "T_AM1_7" = "Compared to other people, I can do most tasks very well",
                     "T_AM1_8" = "Even when things are tough, I can perform quite well")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- survey_data |> filter(engagement == "Yes") |> filter(persona == "Nina") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
    N <- frq_result[[1]]$n.valid[1] # Extract N
    frq_df %>%
      filter(!is.na(val)) %>%
      mutate(variable = variable, N = N, variable_title = variable_titles[variable]) # Add columns for the variable name, N, and variable title
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))

# summary data
viz_likert <- combined_df %>%
  select(variable_title, label, valid.prc) %>%
  pivot_wider(
    names_from = label,
    values_from = valid.prc
  ) |>
rename(Neutral = `Neither agree nor disagree`,
Item = variable_title) |>
select(Item, `Strongly disagree`, Disagree, Neutral, Agree, `Strongly agree`)

# Plot the chart
plot(likert(summary = viz_likert), 
plot.percent.neutral=FALSE, 
legend.position="top",
low.color = "#5AB4AC", 
high.color = "#FA0005", 
Neutral.color.ramp = "white", 
Neutral.color = "grey90")
```


```{r}
#| echo: false
#| message: false
#| warning: false


viz_likert %>%
rename(Indicator = Item) |>
  gt() %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "left",
    columns = c("Indicator")
  ) %>%
cols_align(
    align = "right",
    columns = -c("Indicator")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(2))
```


### Non-users

#### All personas

::: {.note}
<span class="info-icon">ℹ️</span>
The chart below is for all personas who have **Never engaged** with Shujaaz media.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10

# List of variables to process
variables <- c("T_AM1_1", "T_AM1_2", "T_AM1_3", "T_AM1_4", "T_AM1_5", "T_AM1_6", "T_AM1_7", "T_AM1_8")

# Mapping variable names to readable titles
variable_titles <- c("T_AM1_1" = "I will be able to achieve most of the goals that I set for myself",
                     "T_AM1_2" = "When facing difficult tasks, I am certain that I will accomplish them",
                     "T_AM1_3" = "I think that I can obtain outcomes that are important to me",
                     "T_AM1_4" = "I believe I can succeed at most any endeavor to which I set my mind",
                     "T_AM1_5" = "I will be able to successfully overcome many challenges",
                     "T_AM1_6" = "I am confident that I can perform effectively on many different tasks",
                     "T_AM1_7" = "Compared to other people, I can do most tasks very well",
                     "T_AM1_8" = "Even when things are tough, I can perform quite well")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- survey_data |> filter(engagement == "No") |> 
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
    N <- frq_result[[1]]$n.valid[1] # Extract N
    frq_df %>%
      filter(!is.na(val)) %>%
      mutate(variable = variable, N = N, variable_title = variable_titles[variable]) # Add columns for the variable name, N, and variable title
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))

# summary data
viz_likert <- combined_df %>%
  select(variable_title, label, valid.prc) %>%
  pivot_wider(
    names_from = label,
    values_from = valid.prc
  ) |>
rename(Neutral = `Neither agree nor disagree`,
Item = variable_title) |>
select(Item, `Strongly disagree`, Disagree, Neutral, Agree, `Strongly agree`)

# Plot the chart
plot(likert(summary = viz_likert), 
plot.percent.neutral=FALSE, 
legend.position="top",
low.color = "#5AB4AC", 
high.color = "#FA0005", 
Neutral.color.ramp = "white", 
Neutral.color = "grey90")
```


```{r}
#| echo: false
#| message: false
#| warning: false


viz_likert %>%
rename(Indicator = Item) |>
  gt() %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "left",
    columns = c("Indicator")
  ) %>%
cols_align(
    align = "right",
    columns = -c("Indicator")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(2))
```


#### Barasa

::: {.note}
<span class="info-icon">ℹ️</span>
The chart below is for all Barasa **Never engaged** with Shujaaz media.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10

# List of variables to process
variables <- c("T_AM1_1", "T_AM1_2", "T_AM1_3", "T_AM1_4", "T_AM1_5", "T_AM1_6", "T_AM1_7", "T_AM1_8")

# Mapping variable names to readable titles
variable_titles <- c("T_AM1_1" = "I will be able to achieve most of the goals that I set for myself",
                     "T_AM1_2" = "When facing difficult tasks, I am certain that I will accomplish them",
                     "T_AM1_3" = "I think that I can obtain outcomes that are important to me",
                     "T_AM1_4" = "I believe I can succeed at most any endeavor to which I set my mind",
                     "T_AM1_5" = "I will be able to successfully overcome many challenges",
                     "T_AM1_6" = "I am confident that I can perform effectively on many different tasks",
                     "T_AM1_7" = "Compared to other people, I can do most tasks very well",
                     "T_AM1_8" = "Even when things are tough, I can perform quite well")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- survey_data |> filter(engagement == "No") |> filter(persona == "Barasa") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
    N <- frq_result[[1]]$n.valid[1] # Extract N
    frq_df %>%
      filter(!is.na(val)) %>%
      mutate(variable = variable, N = N, variable_title = variable_titles[variable]) # Add columns for the variable name, N, and variable title
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))

# summary data
viz_likert <- combined_df %>%
  select(variable_title, label, valid.prc) %>%
  pivot_wider(
    names_from = label,
    values_from = valid.prc
  ) |>
rename(Neutral = `Neither agree nor disagree`,
Item = variable_title) |>
select(Item, `Strongly disagree`, Disagree, Neutral, Agree, `Strongly agree`)

# Plot the chart
plot(likert(summary = viz_likert), 
plot.percent.neutral=FALSE, 
legend.position="top",
low.color = "#5AB4AC", 
high.color = "#FA0005", 
Neutral.color.ramp = "white", 
Neutral.color = "grey90")
```


```{r}
#| echo: false
#| message: false
#| warning: false


viz_likert %>%
rename(Indicator = Item) |>
  gt() %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "left",
    columns = c("Indicator")
  ) %>%
cols_align(
    align = "right",
    columns = -c("Indicator")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(2))
```




#### Boni

::: {.note}
<span class="info-icon">ℹ️</span>
The chart below is for all Boni **Never engaged** with Shujaaz media.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10

# List of variables to process
variables <- c("T_AM1_1", "T_AM1_2", "T_AM1_3", "T_AM1_4", "T_AM1_5", "T_AM1_6", "T_AM1_7", "T_AM1_8")

# Mapping variable names to readable titles
variable_titles <- c("T_AM1_1" = "I will be able to achieve most of the goals that I set for myself",
                     "T_AM1_2" = "When facing difficult tasks, I am certain that I will accomplish them",
                     "T_AM1_3" = "I think that I can obtain outcomes that are important to me",
                     "T_AM1_4" = "I believe I can succeed at most any endeavor to which I set my mind",
                     "T_AM1_5" = "I will be able to successfully overcome many challenges",
                     "T_AM1_6" = "I am confident that I can perform effectively on many different tasks",
                     "T_AM1_7" = "Compared to other people, I can do most tasks very well",
                     "T_AM1_8" = "Even when things are tough, I can perform quite well")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- survey_data |> filter(engagement == "No") |> filter(persona == "Boni") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
    N <- frq_result[[1]]$n.valid[1] # Extract N
    frq_df %>%
      filter(!is.na(val)) %>%
      mutate(variable = variable, N = N, variable_title = variable_titles[variable]) # Add columns for the variable name, N, and variable title
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))

# summary data
viz_likert <- combined_df %>%
  select(variable_title, label, valid.prc) %>%
  pivot_wider(
    names_from = label,
    values_from = valid.prc
  ) |>
rename(Neutral = `Neither agree nor disagree`,
Item = variable_title) |>
select(Item, `Strongly disagree`, Disagree, Neutral, Agree, `Strongly agree`)

# Plot the chart
plot(likert(summary = viz_likert), 
plot.percent.neutral=FALSE, 
legend.position="top",
low.color = "#5AB4AC", 
high.color = "#FA0005", 
Neutral.color.ramp = "white", 
Neutral.color = "grey90")
```


```{r}
#| echo: false
#| message: false
#| warning: false


viz_likert %>%
rename(Indicator = Item) |>
  gt() %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "left",
    columns = c("Indicator")
  ) %>%
cols_align(
    align = "right",
    columns = -c("Indicator")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(2))
```



#### Nana

::: {.note}
<span class="info-icon">ℹ️</span>
The chart below is for all Nana **Never engaged** with Shujaaz media.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10

# List of variables to process
variables <- c("T_AM1_1", "T_AM1_2", "T_AM1_3", "T_AM1_4", "T_AM1_5", "T_AM1_6", "T_AM1_7", "T_AM1_8")

# Mapping variable names to readable titles
variable_titles <- c("T_AM1_1" = "I will be able to achieve most of the goals that I set for myself",
                     "T_AM1_2" = "When facing difficult tasks, I am certain that I will accomplish them",
                     "T_AM1_3" = "I think that I can obtain outcomes that are important to me",
                     "T_AM1_4" = "I believe I can succeed at most any endeavor to which I set my mind",
                     "T_AM1_5" = "I will be able to successfully overcome many challenges",
                     "T_AM1_6" = "I am confident that I can perform effectively on many different tasks",
                     "T_AM1_7" = "Compared to other people, I can do most tasks very well",
                     "T_AM1_8" = "Even when things are tough, I can perform quite well")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- survey_data |> filter(engagement == "No") |> filter(persona == "Nana") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
    N <- frq_result[[1]]$n.valid[1] # Extract N
    frq_df %>%
      filter(!is.na(val)) %>%
      mutate(variable = variable, N = N, variable_title = variable_titles[variable]) # Add columns for the variable name, N, and variable title
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))

# summary data
viz_likert <- combined_df %>%
  select(variable_title, label, valid.prc) %>%
  pivot_wider(
    names_from = label,
    values_from = valid.prc
  ) |>
rename(Neutral = `Neither agree nor disagree`,
Item = variable_title) |>
select(Item, `Strongly disagree`, Disagree, Neutral, Agree, `Strongly agree`)

# Plot the chart
plot(likert(summary = viz_likert), 
plot.percent.neutral=FALSE, 
legend.position="top",
low.color = "#5AB4AC", 
high.color = "#FA0005", 
Neutral.color.ramp = "white", 
Neutral.color = "grey90")
```


```{r}
#| echo: false
#| message: false
#| warning: false


viz_likert %>%
rename(Indicator = Item) |>
  gt() %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "left",
    columns = c("Indicator")
  ) %>%
cols_align(
    align = "right",
    columns = -c("Indicator")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(2))
```


#### Nina

::: {.note}
<span class="info-icon">ℹ️</span>
The chart below is for all Nina **Never engaged** with Shujaaz media.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10

# List of variables to process
variables <- c("T_AM1_1", "T_AM1_2", "T_AM1_3", "T_AM1_4", "T_AM1_5", "T_AM1_6", "T_AM1_7", "T_AM1_8")

# Mapping variable names to readable titles
variable_titles <- c("T_AM1_1" = "I will be able to achieve most of the goals that I set for myself",
                     "T_AM1_2" = "When facing difficult tasks, I am certain that I will accomplish them",
                     "T_AM1_3" = "I think that I can obtain outcomes that are important to me",
                     "T_AM1_4" = "I believe I can succeed at most any endeavor to which I set my mind",
                     "T_AM1_5" = "I will be able to successfully overcome many challenges",
                     "T_AM1_6" = "I am confident that I can perform effectively on many different tasks",
                     "T_AM1_7" = "Compared to other people, I can do most tasks very well",
                     "T_AM1_8" = "Even when things are tough, I can perform quite well")

# Function to process each variable and return a data frame
process_variable <- function(variable) {
  frq_result <- survey_data |> filter(engagement == "No") |> filter(persona == "Nina") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
    N <- frq_result[[1]]$n.valid[1] # Extract N
    frq_df %>%
      filter(!is.na(val)) %>%
      mutate(variable = variable, N = N, variable_title = variable_titles[variable]) # Add columns for the variable name, N, and variable title
}


# Combine data for all variables
combined_df <- map_dfr(variables, process_variable)

# Create a column for the combined percentage and N label
combined_df <- combined_df %>%
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))

# summary data
viz_likert <- combined_df %>%
  select(variable_title, label, valid.prc) %>%
  pivot_wider(
    names_from = label,
    values_from = valid.prc
  ) |>
rename(Neutral = `Neither agree nor disagree`,
Item = variable_title) |>
select(Item, `Strongly disagree`, Disagree, Neutral, Agree, `Strongly agree`)

# Plot the chart
plot(likert(summary = viz_likert), 
plot.percent.neutral=FALSE, 
legend.position="top",
low.color = "#5AB4AC", 
high.color = "#FA0005", 
Neutral.color.ramp = "white", 
Neutral.color = "grey90")
```


```{r}
#| echo: false
#| message: false
#| warning: false


viz_likert %>%
rename(Indicator = Item) |>
  gt() %>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "left",
    columns = c("Indicator")
  ) %>%
cols_align(
    align = "right",
    columns = -c("Indicator")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(2))
```


## Optimistic about future


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10


summarize_by_persona <- function(survey_data, variable,  description = NULL) {
  # Define a helper function to add persona column to the data frame
  add_persona_column <- function(df, persona_value) {
    df %>% mutate(persona = persona_value)
  }
  
  # Process the 'All' group
  all_results <- survey_data |> 
    group_split(persona) |> 
    map_dfr(~ {
      df <- frq(.x, !!sym(variable), weights = .x$base_weight) |> 
        rbindlist()
      add_persona_column(df, unique(.x$persona))
    }) |>
    mutate(engagement = "All",
indicator = description)
  
  # Process the 'Yes' engagement group
  yes_results <- survey_data |> 
    filter(engagement == "Yes") |> 
    group_split(persona) |> 
    map_dfr(~ {
      df <- frq(.x, !!sym(variable), weights = .x$base_weight) |> 
        rbindlist()
      add_persona_column(df, unique(.x$persona))
    }) |>
    mutate(engagement = "Yes",
indicator = description)
  
  # Process the 'No' engagement group
  no_results <- survey_data |> 
    filter(engagement == "No") |> 
    group_split(persona) |> 
    map_dfr(~ {
      df <- frq(.x, !!sym(variable), weights = .x$base_weight) |> 
        rbindlist()
      add_persona_column(df, unique(.x$persona))
    }) |>
    mutate(engagement = "No",
indicator = description)
  
  # Combine all results
  return(bind_rows(all_results, yes_results, no_results)) 
}





```


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 10


community_support <- summarize_by_persona(survey_data, 
"optimism", 
"Optimistic about future") |>
mutate(label = val) |>
select(indicator, label, persona, engagement, valid.prc, frq ) |>
rename(Percent = valid.prc, Number = frq) |>
filter(!is.na(label)) |>
select(-c(indicator))

community_support|>
filter(label == "Yes") |>
select(-c(label, Number))|>
mutate(engagement = case_when(engagement == "All" ~ "Overall",
engagement == "Yes" ~ "User",
engagement == "No" ~ "Non user",
TRUE ~ NA_character_)) |>
rename(Persona = persona) |>
pivot_wider(names_from = engagement, values_from = Percent) |>
gt()|>
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "left",
    columns = c("Persona")
  ) %>%
cols_align(
    align = "right",
    columns = -c("Persona")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) |>
tab_options(table.width = pct(100), data_row.padding = px(2))
```




# Money

## Money Management

**Question :** I know how to manage the little money I have to take care of my needs.

::: {.note}
<span class="info-icon">ℹ️</span>
**65%** of young people who have ever used Shujaaz media manage their money well, compared to **53%** for those who have never (P value `r pretty_p_value(5.387e-07)`).
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 8

money_mngt_overall<- survey_design %>%
  group_by(engagement, money_mngt) %>%
  summarise(prop = survey_prop()) %>%
  filter(money_mngt == "Yes") %>%
  select(-c(prop_se)) |>
  pivot_wider(names_from = engagement, values_from = prop)

money_mngt_persona<- survey_design %>%
  group_by(persona, engagement, money_mngt) %>%
  summarise(prop = survey_prop()) %>%
  filter(money_mngt == "Yes") %>%
  select(-c(prop_se)) |>
  pivot_wider(names_from = engagement, values_from = prop)

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 5
#| fig-width: 8
#| results: hide

# Test of independennce
chisq_test1 <- svychisq(~ money_mngt + engagement, survey_design)
chisq_test1 <- summary(svytable(~money_mngt + engagement,survey_design))

# Create a contingency table for Money Management (No, Yes) and Engagement (No, Yes)
data <- svytable(~money_mngt + engagement,survey_design)

# Perform Chi-Square Test
chi_square_test <- chisq.test(data)
#chi_square_test

# If the Chi-Square test is significant, perform test of proportions
res <- if(chi_square_test$p.value < 0.05) {
  # Extract counts
  yes_money_mngt <- data[2,]
  
  # Perform proportion tests
  prop_test_yes <- prop.test(yes_money_mngt, colSums(data), alternative = "less")
  
  # Print proportion test results
  print(prop_test_yes)
}
```



```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 6

money_mngt_persona |>
pivot_longer(cols = No:Yes, names_to = "User") |>
ggplot(aes(x = persona, y = value, fill = User)) +
  geom_bar(stat = 'identity', position = position_dodge(width = 0.9)) +
  geom_text(aes(label = label_percent()(round(value, 2))), 
            position = position_dodge(width = 0.9), 
            vjust = -0.3, size = 3.5) +
  labs(title = 'I know how to manage the little money I have to take care of my needs', 
       x = 'Persona', 
       y = 'Percent Score') +
  scale_fill_manual(values = c('No' = 'darkgrey', 'Yes' = '#FA0005'))+
scale_y_continuous(labels = scales::label_percent(accuracy = 1))


```




