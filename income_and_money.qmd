---
format:
  html:
    page-layout: full
    toc: true
    toc-title: "Table of Contents"
    toc-depth: 5
    toc-expand: 1
    toc-location: left
    number-sections: true
    css: custom.css
    include-in-header: 
      text: |
        <div id="title">
          <div style="float: left; width: 20%;">
            <img src="images/logo.png" alt="Logo" style="width: 150px; margin-left: 20px;"/>
          </div>
          <div style="float: left; width: 60%; text-align: center;">
            <h1> Insights From The Annual Survey </h1>
          </div>
          <div style="float: right; width: 20%; text-align: right;">
            <p style="margin-right: 20px; margin-top: 20px; font-size: 1.2em;">Shujaaz K&L</p>
          </div>
        </div>
---


```{r}
#| message: false
#| results: hide
#| echo: false
#| warning: false


library(tidyverse)
library(readxl)
library(scales)
library(DT)
library(gt)
library(haven)
library(rio)
library(janitor)
library(data.table)
library(sjlabelled)
library(sjmisc)
library(freqtables)
library(ggtext)
library(scales)
library(prismatic)
library(gtsummary)
library(survey)
library(srvyr)
library(psych)
library(extrafont)
library(likert)
library(broom)
library(prettyunits)
library(tidytext)
```

```{r}
#| message: false
#| results: hide
#| echo: false
#| warning: false

#font_import()
#loadfonts(device = "win")

# # Define the custom theme with adjusted font sizes
# custom_theme <- theme_minimal(base_size = 15) +  # Adjust base size as needed
#   theme(
#     plot.title = element_text(size = 12, face = "bold"),  # Adjust title size
#     legend.title = element_text(size = 10),              # Adjust legend title size
#     legend.text = element_text(size = 12),               # Adjust legend text size
#     axis.text = element_text(size = 12),                 # Adjust axis text size
#     axis.title = element_text(size = 12)                 # Adjust axis title size
#   )

# Set the custom theme globally
# Set the global theme
theme_set(
  theme_minimal(base_family = "Roboto Condensed") +
    theme(plot.title = element_text(hjust = 0.5, size = 12),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          axis.title.x = element_blank(),
          axis.title.y = element_blank(),
          axis.text.x = element_text(size = 12),
          axis.text.y = element_text(size = 12),
          legend.text = element_text(size = 12),
          legend.title = element_blank()
          ) 
)
```


```{r}
#| message: false
#| results: hide
#| echo: false

raw_23 <- read_sav("data/2023_shujaaz annual survey anonymized.sav")
pop_kenya <- import("data/us_census_pop_kenya.xlsx", 
                    sheet = "2015 - 2030", 
                    skip = 3)

county_mapping <- import("data/county_cleaning.xlsx", 
                    sheet = "Mapping") |> select(-check)
raw_23 <- raw_23 |>
  left_join(county_mapping,
            by = c("Q1_2" = "value"))
```

```{r}
#| message: false
#| results: hide
#| echo: false

binarize_awareness <- function(data, columns) {
  # Ensure columns is a character vector
  columns <- as.character(columns)
  
  # Loop through each specified column
  for (col in columns) {
    # Check if the column exists in the data frame
    if (col %in% colnames(data)) {
      # Replace 2 with 0 in the specified column
      data[[col]][data[[col]] %in% c(2,3)] <- 0
      # Assign factor labels
      data[[col]] <- as.numeric(data[[col]])
    } else {
      warning(paste("Column", col, "not found in the data frame"))
    }
  }
  
  return(data)
}

# Awareness data cleaning
awareness_vars <- c("T_Q3_1_1", 
                    "T_Q3_1_2", 
                    "T_Q3_1_3", 
                    "T_Q3_1_4",
                    "Q3_2_O1",
                    "Q3_2_O2",
                    "Q3_2_O3",
                    "Q3_2a",
                    "T_Q3_3_1",
                    "T_Q3_3_2",
                    "T_Q3_3_3",
                    "Q3_4",
                    "Q3_4a")

raw_23 <- raw_23 %>%
  mutate(across(all_of(awareness_vars), ~., .names = "{col}_copy"))

awareness_clean <- binarize_awareness(raw_23, awareness_vars) %>%
  mutate(aware = do.call(pmax, c(select(., all_of(awareness_vars)), 
                                         na.rm = TRUE))
  )
  
  
```


```{r}
#| message: false
#| results: hide
#| echo: false

binarize_engagement <- function(data, columns) {
  # Ensure columns is a character vector
  columns <- as.character(columns)
  
  # Loop through each specified column
  for (col in columns) {
    # Check if the column exists in the data frame
    if (col %in% colnames(data)) {
      # Replace with 1 in the specified column
      data[[col]][data[[col]] %in% c(1,6)] <- 0
      # Replace with 0 in the specified column
      data[[col]][data[[col]] %in% c(2,3,4,5)] <- 1
      # Assign factor labels
      data[[col]] <- as.numeric(data[[col]])
    } else {
      warning(paste("Column", col, "not found in the data frame"))
    }
  }
  
  return(data)
}

# Awareness data cleaning
engagement_vars <- c("T_Q3_5_1", 
                    "T_Q3_5_2", 
                    "T_Q3_5_3", 
                    "T_Q3_5_4",
                    "T_Q3_5_5",
                    "T_Q3_5_6",
                    "T_Q3_5_7",
                    "T_Q3_5_8",
                    "T_Q3_5_9",
                    "T_Q3_5_10",
                    "T_Q3_5_11",
                    "T_Q3_5_12",
                    "T_Q3_5_13",
                    "T_Q3_5_14",
                    "T_Q3_5_15",
                    "T_Q3_5_16",
                    "T_Q3_5_17",
                    "T_Q3_5_18"
                    )

less_comic <- setdiff(engagement_vars, "T_Q3_5_1")

meta_combo_vars <-  c("T_Q3_5_13","T_Q3_5_14", "T_Q3_5_15")
facebook_vars <- c("T_Q3_5_2", "T_Q3_5_4", "T_Q3_5_12", "T_Q3_5_16")
instagram_vars <- c("T_Q3_5_3", "T_Q3_5_6")
youtube_vars <-  c("T_Q3_5_8", "T_Q3_5_9")
tiktok_vars <- c("T_Q3_5_10")
twitter_vars <- c("T_Q3_5_5")
whatsapp_vars <- c("T_Q3_5_7")
sms_vars <- c("T_Q3_5_17")


awareness_clean <- awareness_clean %>%
  mutate(across(all_of(engagement_vars), ~., .names = "{col}_copy"))


engagement_clean <- binarize_engagement(awareness_clean, engagement_vars) %>%
  mutate(engage = do.call(pmax, c(select(., all_of(engagement_vars)), 
                                         na.rm = TRUE)),
         engagement_noncomic = do.call(pmax, c(select(., all_of(less_comic)), 
                                         na.rm = TRUE)),
         comic_only = case_when(T_Q3_5_1 == 0 ~ 0,
                                engagement_noncomic == 0 & T_Q3_5_1 == 1 ~ 1,
                                 TRUE ~ NA_integer_
                                ),
         meta_combo_use = do.call(pmax, c(select(., all_of(meta_combo_vars)), 
                                         na.rm = TRUE)),
         facebook_use = do.call(pmax, c(select(., all_of(facebook_vars)), 
                                         na.rm = TRUE)),
         instagram_use = do.call(pmax, c(select(., all_of(instagram_vars)), 
                                         na.rm = TRUE)),
         youtubr_use = do.call(pmax, c(select(., all_of(youtube_vars)), 
                                         na.rm = TRUE)),
         tiktok_use = do.call(pmax, c(select(., all_of(tiktok_vars)), 
                                         na.rm = TRUE)),
         whataspp_use = do.call(pmax, c(select(., all_of(whatsapp_vars)), 
                                         na.rm = TRUE)),
         sms_use = do.call(pmax, c(select(., all_of(sms_vars)), 
                                         na.rm = TRUE))
         
  ) %>%
  mutate(channels_use = rowSums(select(., meta_combo_use:sms_use), 
                                na.rm = TRUE),
         channels_binary = case_when(channels_use == 0 ~ 0,
                                     channels_use > 1 ~ 1,
                                     TRUE ~ NA_integer_
                                     )
  )
  
  
```


```{r}
#| message: false
#| results: hide
#| echo: false


modern_contraception_vars <- c("FP11_6", 
                               "FP11_7", 
                               "FP11_8", 
                               "FP11_9", 
                               "FP11_10", 
                               "FP11_11", 
                               "FP11_12", 
                               "T_FP11_14", 
                               "FP11_15", 
                               "FP11_16")

engagement_clean <-engagement_clean %>%
  mutate(modern_fp = do.call(pmin, c(select(., all_of(modern_contraception_vars)), 
                                         na.rm = TRUE))
         )

```


```{r}
#| message: false
#| results: hide
#| echo: false


times_online <- c("Q2_7_O1", 
                  "Q2_7_O2", 
                  "Q2_7_O3", 
                  "Q2_7_O4", 
                  "Q2_7_O5", 
                  "Q2_7_O6")

# Define a function to calculate the sums for each specified value
calculate_online_sum <- function(df, times_online, value) {
  rowSums(select(df, all_of(times_online)) == value, na.rm = TRUE)
}

# Apply the function to create the new columns
engagement_clean <- engagement_clean %>%
  mutate(online_1 = calculate_online_sum(., times_online, 1),
         online_2 = calculate_online_sum(., times_online, 2),
         online_3 = calculate_online_sum(., times_online, 3),
         online_4 = calculate_online_sum(., times_online, 4),
         online_5 = calculate_online_sum(., times_online, 5),
         online_6 = calculate_online_sum(., times_online, 6))


## Sources of money
money_sources <- c("Q4_2_O1", 
                  "Q4_2_O2", 
                  "Q4_2_O3", 
                  "Q4_2_O4", 
                  "Q4_2_O5", 
                  "Q4_2_O6",
                  "Q4_2_O7", 
                  "Q4_2_O8", 
                  "Q4_2_O9", 
                  "Q4_2_O10")

# Define a function to calculate the sums for each specified value
calculate_source_sum <- function(df, money_sources, value) {
  rowSums(select(df, all_of(money_sources)) == value, na.rm = TRUE)
}

# Apply the function to create the new columns
engagement_clean <- engagement_clean %>%
  mutate(source_1 = calculate_source_sum(., money_sources, 1),
         source_2 = calculate_source_sum(., money_sources, 2),
         source_3 = calculate_source_sum(., money_sources, 3),
         source_4 = calculate_source_sum(., money_sources, 4),
         source_5 = calculate_source_sum(., money_sources, 5),
         source_6 = calculate_source_sum(., money_sources, 6),
         source_7 = calculate_source_sum(., money_sources, 7),
         source_8 = calculate_source_sum(., money_sources, 8),
         source_9 = calculate_source_sum(., money_sources, 9),
         source_10 = calculate_source_sum(., money_sources, 10),
         source_11 = calculate_source_sum(., money_sources, 11),
         source_12 = calculate_source_sum(., money_sources, 12),
         source_13 = calculate_source_sum(., money_sources, 13),
         source_14 = calculate_source_sum(., money_sources, 14),
         source_15 = calculate_source_sum(., money_sources, 15),
         source_16 = calculate_source_sum(., money_sources, 16),
         source_17 = calculate_source_sum(., money_sources, 17),
         source_18 = calculate_source_sum(., money_sources, 18)
         )

```

```{r}
#| message: false
#| results: hide
#| echo: false

## select minimum data

clean_data <- engagement_clean |>
  mutate(id = SbjNum, #Respondent ID
           code = Code,
           county_name = county_label, # County Name
           location = set_label(factor(case_when(Q1_6 == 1 ~ "Urban",
                                        Q1_6 == 2 ~ "Rural",
                                        TRUE ~ NA_character_)),
                                "Location"),
            # Age
           age_group = set_label(factor(
             case_when(Actual_Age >= 15 & Actual_Age <= 19 ~ "15-19",
                       Actual_Age >= 20 & Actual_Age <= 24 ~ "20-24",
                       TRUE ~ NA_character_)),
                             "Age"),
           # Gender
           gender = set_label(factor(
             case_when(Q1_8 == 1 ~ "Male",
                       Q1_8 == 2 ~ "Female",
                       TRUE ~ NA_character_)),
             "Gender"),
           
           persona = set_label(
             factor(case_when(
               gender == "Female" & age_group == "15-19" ~ "Nana",
               gender == "Female" & age_group == "20-24" ~ "Nina",
               gender == "Male" & age_group == "15-19" ~ "Boni",
               gender == "Male" & age_group == "20-24" ~ "Barasa",
               TRUE ~ NA_character_)),
               "Persona"),
           
           education = set_label(relevel(as.factor(
             case_when(Q1_9 %in% c(1,2,3) ~ "Incomplete primary",
                       Q1_9 %in% c(4) ~ "Complete primary",
                       Q1_9 %in% c(5) ~ "Complete secondary",
                       Q1_9 %in% c(6,7) ~ "Secondary and above",
                       TRUE ~ NA_character_)),
             "Incomplete primary"),
             "Education Level"),
           
           
           awareness = set_label(factor(case_when(aware == 1 ~ 1,
                                 aware == 0 & engage == 1 ~ 1,
                                 TRUE ~ aware
                                 ),
                                 labels = c("No", "Yes")),
                                 "Awareness"),
         
           prompted_booklet = set_label(case_when(
                                 Q3_2_O1 == 0 & Q3_2a == 0 ~ 0,
                                 Q3_2_O1 == 1 | Q3_2a == 1 ~ 1,
                                 TRUE ~ NA_integer_
                                 ),
                                 "Shujaaz Booklet Awareness"),
           
           
           engagement = set_label(factor(case_when(!is.na(aware) & is.na(engage) ~ 0,
                                  TRUE ~ engage
                                  ),
                                 labels = c("No", "Yes")),
                                 "Awareness"),
           
           
           modern_fp_1 = set_label(factor(case_when(modern_fp %in% c(2,3,4,5) ~ "No",
                                                    modern_fp == 1 ~ "Yes",
                                                    TRUE ~ NA_character_),
                                                  labels = c("No", "Yes")),
                                          "Use of modern contraceptives"),
         optimism = set_label(factor(case_when(
                                            AM3 == 1 ~ 0,
                                            AM3 %in% c(2, 3) ~ 1,
                                            TRUE ~ NA_integer_
                                          ), labels = c("No", "Yes")),
                                          "Optimism"),
         money_mngt = set_label(factor(case_when(
                                            T_F1_1 == 2 ~ 0,
                                            T_F1_1 == 1 ~ 1,
                                            TRUE ~ NA_integer_
                                          ), labels = c("No", "Yes")),
                                          "I know how to manage the little money I have to take care of my needs"),
         challenge = gsub("[[:punct:]]", "", tolower(Q1_15))
  ) |>
  filter(!is.na(age_group))
  

```



```{r}
#| message: false
#| results: hide
#| echo: false

county_pop <- pop_kenya |>
  filter(ADM_LEVEL == 1) |>  # Ensure ADM_LEVEL column exists and is filtered for level 1
  transmute(
    country = "Kenya",
    county = ADM1_NAME,  # Ensure ADM1_NAME column exists
    code = as.numeric(NSO_CODE),  # Ensure NSO_CODE can be converted to numeric
    
    # Female Pop
    F1519_2023 = F1519_2023,  # Ensure these columns exist
    F1519_2024 = F1519_2024,
    F1519_2025 = F1519_2025,
    
    F2024_2023 = F2024_2023,
    F2024_2024 = F2024_2024,
    F2024_2025 = F2024_2025,
    
    # Male Pop
    M1519_2023 = M1519_2023,
    M1519_2024 = M1519_2024,
    M1519_2025 = M1519_2025,
    
    M2024_2023 = M2024_2023,
    M2024_2024 = M2024_2024,
    M2024_2025 = M2024_2025
  ) |>
  mutate(
    # Explicitly refer to the current data frame within rowSums
    POP23 = rowSums(across(c(F1519_2023, F2024_2023, M1519_2023, M2024_2023)), na.rm = TRUE),
    POP24 = rowSums(across(c(F1519_2024, F2024_2024, M1519_2024, M2024_2024)), na.rm = TRUE),
    POP25 = rowSums(across(c(F1519_2025, F2024_2025, M1519_2025, M2024_2025)), na.rm = TRUE)
  )

counties <- county_pop |>
  select(county, code)
```

```{r}
#| message: false
#| results: hide
#| echo: false

population_data <- county_pop |>
    pivot_longer(
    cols = starts_with("F") | starts_with("M"),  
    names_to = "indicator",              
    values_to = "population") |>
    mutate(gender = substr(indicator, 1, 1),
           age_group = as.integer(substr(indicator, 2, 5)),
           year = as.integer(substr(indicator, 7, 10))) |>
  transmute(
    country = country,
    code = code,
    county = county,
    gender = ifelse(gender == "F", "Female", "Male"),
    age_group = paste(substr(age_group, 1, 2), substr(age_group, 3,4), sep = "-"),
    year = year,
    population = population
  ) |>
  pivot_wider(names_from = year,
              values_from = population,
              names_prefix = "pop")

write_csv(population_data,
          "data/pop_projections.csv")
```

```{r}
#| message: false
#| results: hide
#| echo: false


# Step 1: Population totals for each group (typically from census data)
survey_population_totals <- population_data |>
  select(code, county, age_group, gender, pop2023) |>
  rename(population = pop2023)

# Step 2: Calculate counts from survey data
survey_counts <- clean_data %>%
  group_by(age_group, gender, code, county_name) %>%
  summarise(count = n(), .groups = 'drop')  # .groups = 'drop' to ungroup directly

# Step 3: Merge survey counts with population totals
survey_counts <- survey_counts %>%
  left_join(survey_population_totals, by = c("age_group", "gender", "code"))

# Step 4: Calculate base weights
# need to adjust the weight so it sums to the population instead of the sample
survey_counts <- survey_counts |>
  mutate(base_weight = population / count)  # Correct the formula

# Step 5: Merge scaled weights back with survey data
survey_data <- clean_data %>%
  left_join(survey_counts |> select(age_group, gender, code, population, base_weight), 
            by = c("age_group", "gender", "code"))

# Step 6: Create a new strata variable that combines code, age_group, and gender
survey_data <- survey_data %>%
  mutate(strata_var = paste(code, age_group, gender, sep = "_"))

# Step 7: Handle missing values in weights if any
survey_data <- survey_data %>%
  mutate(base_weight = ifelse(is.na(base_weight), 0, base_weight))

# Step 8: Verify the weights
sum(survey_data$base_weight)

```

```{r}
#| echo: false

survey_design <- survey_data |>
  as_survey_design(weights = base_weight,
                   strata = code,
                   ids = id,
                   nest = TRUE)
```


# Income and money

## Main activity

::: {.note}
<span class="info-icon">ℹ️</span>
Majority (62%) of young people (fans and no fans) are full-time students. 
:::


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10

pop_all <- survey_data |> freq_table(Q4_1) |> mutate(pop = "All")
pop_user <- survey_data |> filter(engagement == "Yes") |> freq_table(Q4_1) |> mutate(pop = "Fan")
pop_nonuser <- survey_data |> filter(engagement == "No") |> freq_table(Q4_1) |> mutate(pop = "Non fan")

combo <- bind_rows(pop_all, pop_user, pop_nonuser) |>
select(cat, pop, percent, lcl, ucl)

```




```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10

# List of variables to process
variables <- c("Q4_1")

# Mapping variable names to readable titles
variable_titles <- c("Q4_1" = "Main activity in the past 12 months"
)

# Function to process each variable and return a data frame
process_variable_all <- function(variable) {
  frq_result <- survey_data |> 
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}

process_variable_fan <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}

process_variable_nonfan <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N) # Add columns for the variable name and N
}


# Combine data for all variables
df_all <- map_dfr(variables, process_variable_all) |> mutate(pop = "All")
df_fan <- map_dfr(variables, process_variable_fan) |> mutate(pop = "Fans")
df_nonfan <- map_dfr(variables, process_variable_nonfan) |> mutate(pop = "Non-fans")

df_combo <- bind_rows(df_all, df_fan, df_nonfan) |>
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))|>
  mutate(valid.prc = valid.prc/100,
      label = case_when(val == 2 ~ "Self-employed, working for yourself, have my own small business",
      val == 3 ~ "Working for a company/organization full-time or part-time for a regular salary",
      val == 4 ~ "Doing occasional paid assignments for companies or people, irregular pay, or regular pay",
      val == 8 ~ "Other",
      TRUE  ~ label)
  ) |>
filter(label != "DK/Refused")

```


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo %>%
select(label, valid.prc, pop) |>
pivot_wider(names_from = pop, values_from = valid.prc) |>
rename("Main activity" = label) |>
gt() %>%
tab_header(
    title = "Percentage"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_percent(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Main activity")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Main activity"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(80), data_row.padding = px(2))

```




```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo %>%
select(label, frq, pop) |>
pivot_wider(names_from = pop, values_from = frq) |>
rename("Main activity" = label) |>
gt() %>%
tab_header(
    title = "Estimated number"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Main activity")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Main activity"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(80), data_row.padding = px(2))

```


## Sources of money

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10

# List of variables to process
variables <- c("source_1", "source_2", "source_3", "source_4", "source_5", "source_6", "source_7", "source_8", "source_9", "source_10", "source_11", "source_12", "source_13", "source_14", "source_15", "source_16", "source_17", "source_18")



# Mapping variable names to readable titles
variable_titles <- c(
  "source_1" = "Student scholarship",
  "source_2" = "Government welfare, subsidy, or other benefits",
  "source_3" = "Non-government/private organization welfare, subsidy, or other benefits",
  "source_4" = "Transfers/upkeep money or in-kind support from a family member or a relative",
  "source_5" = "Savings, money you or a family member accumulated for your expenses",
  "source_6" = "Interest on stock and shares",
  "source_7" = "Occasionally sell my belongings",
  "source_8" = "Occasionally grow and/or sell produce, livestock, fish, etc.",
  "source_9" = "A loan from friends, relatives, neighbors, or other people",
  "source_10" = "A loan from an informal group (e.g., chama)",
  "source_11" = "A loan from a formal financial organization (e.g., a bank, MFI, SACCO)",
  "source_12" = "A digital loan from Tala, Branch, Fuliza, M-Shwari and similar",
  "source_13" = "Pretended that myself or somebody in my family was sick to raise money from other people",
  "source_14" = "Cheated someone out of a little money once or twice",
  "source_15" = "Stole a bit of money here and there",
  "source_16" = "I have a sponsa, who pays my bills and/or gives me money",
  "source_17" = "Other",
  "source_18" = "DK/Refused"
)


# Function to process each variable and return a data frame
process_variable_all <- function(variable) {
  frq_result <- survey_data |> 
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_fan <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable])
}

process_variable_nonfan <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}


# Combine data for all variables
df_all <- map_dfr(variables, process_variable_all) |> mutate(pop = "All")
df_fan <- map_dfr(variables, process_variable_fan) |> mutate(pop = "Fans")
df_nonfan <- map_dfr(variables, process_variable_nonfan) |> mutate(pop = "Non-fans")

df_combo <- bind_rows(df_all, df_fan, df_nonfan) |>
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))|>
  mutate(valid.prc = valid.prc/100) |>
filter(variable_title != "DK/Refused")

```



```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


# Users
# Function to process each variable and return a data frame
process_variable_barasa_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Barasa") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_boni_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Boni") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_nana_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Nana") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable])
}

process_variable_nina_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Nina") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}


# Non Users
# Function to process each variable and return a data frame
process_variable_barasa_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Barasa") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_boni_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Boni") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_nana_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Nana") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable])
}

process_variable_nina_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Nina") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}



# Combine data for all variables
df_barasa_yes <- map_dfr(variables, process_variable_barasa_yes) |> mutate(pop = "Barasa", user = "Fan")
df_boni_yes <- map_dfr(variables, process_variable_boni_yes) |> mutate(pop = "Boni", user = "Fan")
df_nana_yes <- map_dfr(variables, process_variable_nana_yes) |> mutate(pop = "Nana", user = "Fan")
df_nina_yes <- map_dfr(variables, process_variable_nina_yes) |> mutate(pop = "Nina", user = "Fan")


df_barasa_no <- map_dfr(variables, process_variable_barasa_no) |> mutate(pop = "Barasa", user = "Non-fan")
df_boni_no <- map_dfr(variables, process_variable_boni_no) |> mutate(pop = "Boni", user = "Non-fan")
df_nana_no <- map_dfr(variables, process_variable_nana_no) |> mutate(pop = "Nana", user = "Non-fan")
df_nina_no <- map_dfr(variables, process_variable_nina_no) |> mutate(pop = "Nina", user = "Non-fan")

df_combo_persona <- bind_rows(df_barasa_yes, df_boni_yes, df_nana_yes, df_nina_yes,
                              df_barasa_no, df_boni_no, df_nana_no, df_nina_no
                             ) |>
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))|>
  mutate(valid.prc = valid.prc/100) |>
filter(variable_title != "DK/Refused")

```




### Overall

::: {.note}
<span class="info-icon">ℹ️</span>
Majority of young people get their money from relatives, savings and government welfare. Higher among Shujaaz fans.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo %>%
filter(val == 1) |>
select(variable_title, valid.prc, pop) |>
pivot_wider(names_from = pop, values_from = valid.prc) |>
rename("Source" = variable_title) |>
gt() %>%
tab_header(
    title = "Percentage"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_percent(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Source")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Source"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(80), data_row.padding = px(2))

```



```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo |>
filter(val == 1) |>
select(variable_title, frq, pop) |>
pivot_wider(names_from = pop, values_from = frq) |>
rename("Source" = variable_title) |>
gt() %>%
tab_header(
    title = "Estimated number"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Source")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Source"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(80), data_row.padding = px(2))

```


### By persona


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo_persona %>%
  filter(val == 1) %>%
  select(variable_title, valid.prc, user, pop) %>%
  pivot_wider(
    names_from = c(user, pop), 
    values_from = valid.prc, 
    names_glue = "{user}_{pop}",
    values_fill = list(valid.prc = 0)
  )%>%
rename("Source" = variable_title) |>
gt() %>%
tab_spanner_delim(
    delim = "_"
  ) %>%
tab_header(
    title = "Percentage"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_percent(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Source")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Source"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(100), data_row.padding = px(2))

```


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo_persona %>%
  filter(val == 1) %>%
  select(variable_title, frq, user, pop) %>%
  pivot_wider(
    names_from = c(user, pop), 
    values_from = frq, 
    names_glue = "{user}_{pop}",
    values_fill = list(frq = 0)
  )%>%
rename("Source" = variable_title) |>
gt() %>%
tab_spanner_delim(
    delim = "_"
  ) %>%
tab_header(
    title = "Percentage"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Source")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Source"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(100), data_row.padding = px(2))

```



## Income generation activities

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10

# List of variables to process
variables <- c("Q4_3")



# Mapping variable names to readable titles
variable_titles <- c("Q4_3" = "Income generating activities")


# Function to process each variable and return a data frame
process_variable_all <- function(variable) {
  frq_result <- survey_data |> 
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_fan <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable])
}

process_variable_nonfan <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}


# Combine data for all variables
df_all <- map_dfr(variables, process_variable_all) |> mutate(pop = "All")
df_fan <- map_dfr(variables, process_variable_fan) |> mutate(pop = "Fans")
df_nonfan <- map_dfr(variables, process_variable_nonfan) |> mutate(pop = "Non-fans")

df_combo <- bind_rows(df_all, df_fan, df_nonfan) |>
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))|>
  mutate(valid.prc = valid.prc/100) |>
mutate(
label = case_when(val == 1 ~ "I have a hustle now and I am making money through my hustle(s)",
val == 2 ~ "I have a hustle now, but I want to find a job",
val == 3 ~ "I do not have a hustle now because I had to close it, but I want to start a hustle again",
val == 4 ~ "I do not have a hustle now, but I would like to try some of the hustle ideas",
val == 5 ~ "I do not have a hustle now and would only consider hustling if all my other plans fail",
val == 6 ~ "I do not have a hustle now and will never want to do it, regardless of what happens in my life",
val == 7 ~ "DK/Refused",
TRUE ~ NA_character_
)) |>
filter(label != "DK/Refused")

```



```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


# Users
# Function to process each variable and return a data frame
process_variable_barasa_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Barasa") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_boni_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Boni") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_nana_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Nana") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable])
}

process_variable_nina_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Nina") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}


# Non Users
# Function to process each variable and return a data frame
process_variable_barasa_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Barasa") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_boni_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Boni") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_nana_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Nana") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable])
}

process_variable_nina_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Nina") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}



# Combine data for all variables
df_barasa_yes <- map_dfr(variables, process_variable_barasa_yes) |> mutate(pop = "Barasa", user = "Fan")
df_boni_yes <- map_dfr(variables, process_variable_boni_yes) |> mutate(pop = "Boni", user = "Fan")
df_nana_yes <- map_dfr(variables, process_variable_nana_yes) |> mutate(pop = "Nana", user = "Fan")
df_nina_yes <- map_dfr(variables, process_variable_nina_yes) |> mutate(pop = "Nina", user = "Fan")


df_barasa_no <- map_dfr(variables, process_variable_barasa_no) |> mutate(pop = "Barasa", user = "Non-fan")
df_boni_no <- map_dfr(variables, process_variable_boni_no) |> mutate(pop = "Boni", user = "Non-fan")
df_nana_no <- map_dfr(variables, process_variable_nana_no) |> mutate(pop = "Nana", user = "Non-fan")
df_nina_no <- map_dfr(variables, process_variable_nina_no) |> mutate(pop = "Nina", user = "Non-fan")

df_combo_persona <- bind_rows(df_barasa_yes, df_boni_yes, df_nana_yes, df_nina_yes,
                              df_barasa_no, df_boni_no, df_nana_no, df_nina_no
                             ) |>
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))|>
  mutate(valid.prc = valid.prc/100) |>
mutate(
label = case_when(val == 1 ~ "I have a hustle now and I am making money through my hustle(s)",
val == 2 ~ "I have a hustle now, but I want to find a job",
val == 3 ~ "I do not have a hustle now because I had to close it, but I want to start a hustle again",
val == 4 ~ "I do not have a hustle now, but I would like to try some of the hustle ideas",
val == 5 ~ "I do not have a hustle now and would only consider hustling if all my other plans fail",
val == 6 ~ "I do not have a hustle now and will never want to do it, regardless of what happens in my life",
val == 7 ~ "DK/Refused",
TRUE ~ NA_character_
)) |>
filter(label != "DK/Refused")

```




### Overall

::: {.note}
<span class="info-icon">ℹ️</span>
Most young people do not have any hustles but would like to try some hustle ideas.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo %>%
select(label, valid.prc, pop) |>
pivot_wider(names_from = pop, values_from = valid.prc) |>
rename("Activity" = label) |>
gt() %>%
tab_header(
    title = "Percentage"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_percent(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Activity")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Activity"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(80), data_row.padding = px(2))

```



```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo |>
select(label, frq, pop) |>
pivot_wider(names_from = pop, values_from = frq) |>
rename("Activity" = label) |>
gt() %>%
tab_header(
    title = "Estimated number"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Activity")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Activity"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(80), data_row.padding = px(2))

```


### By persona


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo_persona %>%
  select(label, valid.prc, user, pop) %>%
  pivot_wider(
    names_from = c(user, pop), 
    values_from = valid.prc, 
    names_glue = "{user}_{pop}",
    values_fill = list(valid.prc = 0)
  )%>%
rename("Activity" = label) |>
gt() %>%
tab_spanner_delim(
    delim = "_"
  ) %>%
tab_header(
    title = "Percentage"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_percent(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Activity")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Activity"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(100), data_row.padding = px(2))

```


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo_persona %>%
  select(label, frq, user, pop) %>%
  pivot_wider(
    names_from = c(user, pop), 
    values_from = frq, 
    names_glue = "{user}_{pop}",
    values_fill = list(frq = 0)
  )%>%
rename("Activity" = label) |>
gt() %>%
tab_spanner_delim(
    delim = "_"
  ) %>%
tab_header(
    title = "Percentage"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Activity")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Activity"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(100), data_row.padding = px(2))

```


## Financial Independence 

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10

# List of variables to process
variables <- c("Q4_10")



# Mapping variable names to readable titles
variable_titles <- c("Q4_3" = "Financially independent hustle")


# Function to process each variable and return a data frame
process_variable_all <- function(variable) {
  frq_result <- survey_data |> 
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_fan <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable])
}

process_variable_nonfan <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}


# Combine data for all variables
df_all <- map_dfr(variables, process_variable_all) |> mutate(pop = "All")
df_fan <- map_dfr(variables, process_variable_fan) |> mutate(pop = "Fans")
df_nonfan <- map_dfr(variables, process_variable_nonfan) |> mutate(pop = "Non-fans")

df_combo <- bind_rows(df_all, df_fan, df_nonfan) |>
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))|>
  mutate(valid.prc = valid.prc/100) |>
filter(!is.na(label))

```



```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


# Users
# Function to process each variable and return a data frame
process_variable_barasa_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Barasa") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_boni_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Boni") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_nana_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Nana") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable])
}

process_variable_nina_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Nina") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}


# Non Users
# Function to process each variable and return a data frame
process_variable_barasa_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Barasa") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_boni_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Boni") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_nana_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Nana") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable])
}

process_variable_nina_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Nina") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}



# Combine data for all variables
df_barasa_yes <- map_dfr(variables, process_variable_barasa_yes) |> mutate(pop = "Barasa", user = "Fan")
df_boni_yes <- map_dfr(variables, process_variable_boni_yes) |> mutate(pop = "Boni", user = "Fan")
df_nana_yes <- map_dfr(variables, process_variable_nana_yes) |> mutate(pop = "Nana", user = "Fan")
df_nina_yes <- map_dfr(variables, process_variable_nina_yes) |> mutate(pop = "Nina", user = "Fan")


df_barasa_no <- map_dfr(variables, process_variable_barasa_no) |> mutate(pop = "Barasa", user = "Non-fan")
df_boni_no <- map_dfr(variables, process_variable_boni_no) |> mutate(pop = "Boni", user = "Non-fan")
df_nana_no <- map_dfr(variables, process_variable_nana_no) |> mutate(pop = "Nana", user = "Non-fan")
df_nina_no <- map_dfr(variables, process_variable_nina_no) |> mutate(pop = "Nina", user = "Non-fan")

df_combo_persona <- bind_rows(df_barasa_yes, df_boni_yes, df_nana_yes, df_nina_yes,
                              df_barasa_no, df_boni_no, df_nana_no, df_nina_no
                             ) |>
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))|>
  mutate(valid.prc = valid.prc/100) |>
filter(!is.na(label))

```




### Overall

::: {.note}
<span class="info-icon">ℹ️</span>
Among all hustlas, approximately 48% are financially independent. 49% among Shujaaz fans and 45% among non-fans.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo %>%
select(label, valid.prc, pop) |>
pivot_wider(names_from = pop, values_from = valid.prc) |>
rename("Financial Independence" = label) |>
gt() %>%
tab_header(
    title = "Percentage"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_percent(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Financial Independence")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Financial Independence"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(80), data_row.padding = px(2))

```



```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo |>
select(label, frq, pop) |>
pivot_wider(names_from = pop, values_from = frq) |>
rename("Financial Independence" = label) |>
gt() %>%
tab_header(
    title = "Estimated number"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Financial Independence")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Financial Independence"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(80), data_row.padding = px(2))

```


### By persona


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo_persona %>%
  select(label, valid.prc, user, pop) %>%
  pivot_wider(
    names_from = c(user, pop), 
    values_from = valid.prc, 
    names_glue = "{user}_{pop}",
    values_fill = list(valid.prc = 0)
  )%>%
rename("Financial Independence" = label) |>
gt() %>%
tab_spanner_delim(
    delim = "_"
  ) %>%
tab_header(
    title = "Percentage"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_percent(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Financial Independence")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Financial Independence"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(100), data_row.padding = px(2))

```


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo_persona %>%
  select(label, frq, user, pop) %>%
  pivot_wider(
    names_from = c(user, pop), 
    values_from = frq, 
    names_glue = "{user}_{pop}",
    values_fill = list(frq = 0)
  )%>%
rename("Financial Independence" = label) |>
gt() %>%
tab_spanner_delim(
    delim = "_"
  ) %>%
tab_header(
    title = "Percentage"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Financial Independence")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Financial Independence"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(100), data_row.padding = px(2))

```





## Personal Financial Management

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10

# List of variables to process
variables <- c("T_Q4_18_1", "T_Q4_18_2", "T_Q4_18_3", "T_Q4_18_4")



# Mapping variable names to readable titles
variable_titles <- c(
  "T_Q4_18_1" = "Day-to-Day Expenses",
  "T_Q4_18_2" = "Crisis Management",
  "T_Q4_18_3" = "Opportunities",
  "T_Q4_18_4" = "Managing Debt"
)


# Function to process each variable and return a data frame
process_variable_all <- function(variable) {
  frq_result <- survey_data |> 
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_fan <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable])
}

process_variable_nonfan <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}


# Combine data for all variables
df_all <- map_dfr(variables, process_variable_all) |> mutate(pop = "All")
df_fan <- map_dfr(variables, process_variable_fan) |> mutate(pop = "Fans")
df_nonfan <- map_dfr(variables, process_variable_nonfan) |> mutate(pop = "Non-fans")

df_combo <- bind_rows(df_all, df_fan, df_nonfan) |>
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))|>
  mutate(valid.prc = valid.prc/100) 

```



```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


# Users
# Function to process each variable and return a data frame
process_variable_barasa_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Barasa") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_boni_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Boni") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_nana_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Nana") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable])
}

process_variable_nina_yes <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "Yes") |>
  filter(persona == "Nina") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}


# Non Users
# Function to process each variable and return a data frame
process_variable_barasa_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Barasa") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_boni_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Boni") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}

process_variable_nana_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Nana") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable])
}

process_variable_nina_no <- function(variable) {
  frq_result <- survey_data |>
  filter(engagement == "No") |>
  filter(persona == "Nina") |>
    frq(variable, weights = base_weight)
    frq_df <- as.data.frame(frq_result[[1]])
  N <- frq_result[[1]]$n.valid[1] # Extract N
  frq_df %>%
    filter(!is.na(val)) %>%
    mutate(variable = variable, N = N, variable_title = variable_titles[variable]) 
}



# Combine data for all variables
df_barasa_yes <- map_dfr(variables, process_variable_barasa_yes) |> mutate(pop = "Barasa", user = "Fan")
df_boni_yes <- map_dfr(variables, process_variable_boni_yes) |> mutate(pop = "Boni", user = "Fan")
df_nana_yes <- map_dfr(variables, process_variable_nana_yes) |> mutate(pop = "Nana", user = "Fan")
df_nina_yes <- map_dfr(variables, process_variable_nina_yes) |> mutate(pop = "Nina", user = "Fan")


df_barasa_no <- map_dfr(variables, process_variable_barasa_no) |> mutate(pop = "Barasa", user = "Non-fan")
df_boni_no <- map_dfr(variables, process_variable_boni_no) |> mutate(pop = "Boni", user = "Non-fan")
df_nana_no <- map_dfr(variables, process_variable_nana_no) |> mutate(pop = "Nana", user = "Non-fan")
df_nina_no <- map_dfr(variables, process_variable_nina_no) |> mutate(pop = "Nina", user = "Non-fan")

df_combo_persona <- bind_rows(df_barasa_yes, df_boni_yes, df_nana_yes, df_nina_yes,
                              df_barasa_no, df_boni_no, df_nana_no, df_nina_no
                             ) |>
  mutate(label_text = paste0(round(valid.prc, 0), "% (", comma(frq), ")"))|>
  mutate(valid.prc = valid.prc/100) 

```




### Overall

::: {.note}
<span class="info-icon">ℹ️</span>
A significant majority are not prepared at all to manage debt, taking opportunities and managing crisis.
:::

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo %>%
select(variable_title, label, valid.prc, pop) |>
pivot_wider(
    names_from = c(pop, label), 
    values_from = valid.prc, 
    names_glue = "{pop}_{label}",
    values_fill = list(valid.prc = 0)
)|>
rename("Indicator" = variable_title) |>
gt() %>%
tab_spanner_delim(
    delim = "_"
  ) %>%
tab_header(
    title = "Percentage"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_percent(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Indicator")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Indicator"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(100), data_row.padding = px(2))

```



```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo |>
select(variable_title, label, frq, pop) |>
pivot_wider(
    names_from = c(pop, label), 
    values_from = frq, 
    names_glue = "{pop}_{label}",
    values_fill = list(frq = 0)
) |>
rename("Source" = variable_title) |>
gt() %>%
tab_spanner_delim(
    delim = "_"
  ) %>%
tab_header(
    title = "Estimated number"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Source")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Source"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(100), data_row.padding = px(2))

```


### By persona


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo_persona %>%
  select(variable_title, label, valid.prc, user, pop) %>%
  pivot_wider(
    names_from = c(user, pop, label), 
    values_from = valid.prc, 
    names_glue = "{user}_{pop}_{label}",
    values_fill = list(valid.prc = 0)
  )%>%
rename("Indicator" = variable_title) |>
gt() %>%
tab_spanner_delim(
    delim = "_"
  ) %>%
tab_header(
    title = "Percentage"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_percent(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Indicator")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Indicator"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(100), data_row.padding = px(2))

```


```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-height: 4
#| fig-width: 10


df_combo_persona %>%
  select(variable_title, label, frq, user, pop) %>%
  pivot_wider(
    names_from = c(user, pop, label), 
    values_from = frq, 
    names_glue = "{user}_{pop}_{label}",
    values_fill = list(frq = 0)
  )%>%
rename("Indicator" = variable_title) |>
gt() %>%
tab_spanner_delim(
    delim = "_"
  )%>%
tab_header(
    title = "Percentage"
  )%>%
  tab_style(
    style = cell_borders(sides = "all", color = "gray", weight = px(1)),
    locations = cells_body()
  ) %>%
fmt_number(
      columns = everything(),
      decimals = 0,
      use_seps = TRUE
    ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold", size = px(16))
    ),
    locations = cells_column_labels()
  ) %>%
  cols_align(
    align = "right",
    columns = -c("Indicator")
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto Condensed")
    )
  ) %>%
data_color(
columns = -c("Indicator"),
method = "numeric",
palette = "ggsci::red_material",
direction = "column"
)%>%
tab_options(table.width = pct(100), data_row.padding = px(2))

```














